
The Safe.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000e3e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000be  00800060  00000e3e  00000eb2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         000006cc  00000000  00000000  00000f70  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000085  00000000  00000000  0000163c  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000140  00000000  00000000  000016c8  2**3
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000014c7  00000000  00000000  00001808  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000006f4  00000000  00000000  00002ccf  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000c3e  00000000  00000000  000033c3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000002e0  00000000  00000000  00004004  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000631  00000000  00000000  000042e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000103f  00000000  00000000  00004915  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	11 e0       	ldi	r17, 0x01	; 1
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ee e3       	ldi	r30, 0x3E	; 62
  68:	fe e0       	ldi	r31, 0x0E	; 14
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	ae 31       	cpi	r26, 0x1E	; 30
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	11 e0       	ldi	r17, 0x01	; 1
  78:	ae e1       	ldi	r26, 0x1E	; 30
  7a:	b1 e0       	ldi	r27, 0x01	; 1
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	ae 31       	cpi	r26, 0x1E	; 30
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 49 00 	call	0x92	; 0x92 <main>
  8a:	0c 94 1d 07 	jmp	0xe3a	; 0xe3a <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <main>:
#define EEPROM_PASSWORD_LOCATION4 0x24
#define First_Use                 0XFF
#define Entered_The_Safe          0x00
#define Max_Tries                 2
int main(void)
{     
  92:	cf 93       	push	r28
  94:	df 93       	push	r29
  96:	00 d0       	rcall	.+0      	; 0x98 <main+0x6>
  98:	00 d0       	rcall	.+0      	; 0x9a <main+0x8>
  9a:	0f 92       	push	r0
  9c:	cd b7       	in	r28, 0x3d	; 61
  9e:	de b7       	in	r29, 0x3e	; 62
	
  PORT_vidInit();
  a0:	0e 94 3f 05 	call	0xa7e	; 0xa7e <PORT_vidInit>
  LCD_VidInit();
  a4:	0e 94 a5 03 	call	0x74a	; 0x74a <LCD_VidInit>
   u8 Local_au8Password[4];
   u8 Local_u8Flag = 0;
   u8 Local_u8ReadPassword=KEYPAD_u8_NOTPRESSED;
  a8:	84 e6       	ldi	r24, 0x64	; 100
  aa:	8d 83       	std	Y+5, r24	; 0x05
   u8 Local_u8Tries = Max_Tries;
   u8 i ;

    if(EEPROM_u8ReadeData(EEPROM_Status_Flag)==First_Use) // to check if its the first time to use the safe
  ac:	80 e2       	ldi	r24, 0x20	; 32
  ae:	90 e0       	ldi	r25, 0x00	; 0
  b0:	0e 94 f6 06 	call	0xdec	; 0xdec <EEPROM_u8ReadeData>
  b4:	8f 3f       	cpi	r24, 0xFF	; 255
  b6:	b9 f5       	brne	.+110    	; 0x126 <main+0x94>
    {
	    LCD_enuSendString("Set Password:");
  b8:	80 e6       	ldi	r24, 0x60	; 96
  ba:	90 e0       	ldi	r25, 0x00	; 0
  bc:	0e 94 ee 03 	call	0x7dc	; 0x7dc <LCD_enuSendString>
  c0:	01 e2       	ldi	r16, 0x21	; 33
  c2:	10 e0       	ldi	r17, 0x00	; 0
#define EEPROM_PASSWORD_LOCATION3 0x23
#define EEPROM_PASSWORD_LOCATION4 0x24
#define First_Use                 0XFF
#define Entered_The_Safe          0x00
#define Max_Tries                 2
int main(void)
  c4:	0f 2e       	mov	r0, r31
  c6:	ff ed       	ldi	r31, 0xDF	; 223
  c8:	ef 2e       	mov	r14, r31
  ca:	f0 2d       	mov	r31, r0
  cc:	e0 0e       	add	r14, r16
	    for( i =0; i<=3 ; i++)
	    {
		    
		    do
		    {
			    KEYPAD_enuGetPressedKey(&Local_u8ReadPassword);
  ce:	ce 01       	movw	r24, r28
  d0:	05 96       	adiw	r24, 0x05	; 5
  d2:	0e 94 25 02 	call	0x44a	; 0x44a <KEYPAD_enuGetPressedKey>
			    
		    } while (Local_u8ReadPassword == KEYPAD_u8_NOTPRESSED);
  d6:	8d 81       	ldd	r24, Y+5	; 0x05
  d8:	84 36       	cpi	r24, 0x64	; 100
  da:	c9 f3       	breq	.-14     	; 0xce <main+0x3c>
		    
		    LCD_enuGoTo(1,i);
  dc:	81 e0       	ldi	r24, 0x01	; 1
  de:	6e 2d       	mov	r22, r14
  e0:	0e 94 d3 03 	call	0x7a6	; 0x7a6 <LCD_enuGoTo>
		    LCD_enuSendCharacter(Local_u8ReadPassword);
  e4:	8d 81       	ldd	r24, Y+5	; 0x05
  e6:	0e 94 de 02 	call	0x5bc	; 0x5bc <LCD_enuSendCharacter>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  ea:	8f ef       	ldi	r24, 0xFF	; 255
  ec:	94 e3       	ldi	r25, 0x34	; 52
  ee:	ac e0       	ldi	r26, 0x0C	; 12
  f0:	81 50       	subi	r24, 0x01	; 1
  f2:	90 40       	sbci	r25, 0x00	; 0
  f4:	a0 40       	sbci	r26, 0x00	; 0
  f6:	e1 f7       	brne	.-8      	; 0xf0 <main+0x5e>
  f8:	00 c0       	rjmp	.+0      	; 0xfa <main+0x68>
  fa:	00 00       	nop
		    _delay_ms(500);
			 LCD_enuGoTo(1,i);
  fc:	81 e0       	ldi	r24, 0x01	; 1
  fe:	6e 2d       	mov	r22, r14
 100:	0e 94 d3 03 	call	0x7a6	; 0x7a6 <LCD_enuGoTo>
		    LCD_enuSendCharacter('*');
 104:	8a e2       	ldi	r24, 0x2A	; 42
 106:	0e 94 de 02 	call	0x5bc	; 0x5bc <LCD_enuSendCharacter>
		    EEPROM_enuWriteData(EEPROM_PASSWORD_LOCATION1+i,Local_u8ReadPassword);
 10a:	c8 01       	movw	r24, r16
 10c:	6d 81       	ldd	r22, Y+5	; 0x05
 10e:	0e 94 ec 06 	call	0xdd8	; 0xdd8 <EEPROM_enuWriteData>
 112:	0f 5f       	subi	r16, 0xFF	; 255
 114:	1f 4f       	sbci	r17, 0xFF	; 255
   u8 i ;

    if(EEPROM_u8ReadeData(EEPROM_Status_Flag)==First_Use) // to check if its the first time to use the safe
    {
	    LCD_enuSendString("Set Password:");
	    for( i =0; i<=3 ; i++)
 116:	05 32       	cpi	r16, 0x25	; 37
 118:	11 05       	cpc	r17, r1
 11a:	a1 f6       	brne	.-88     	; 0xc4 <main+0x32>
		    _delay_ms(500);
			 LCD_enuGoTo(1,i);
		    LCD_enuSendCharacter('*');
		    EEPROM_enuWriteData(EEPROM_PASSWORD_LOCATION1+i,Local_u8ReadPassword);
	    }
	    EEPROM_enuWriteData(EEPROM_Status_Flag,Entered_The_Safe); // set the flag to 0
 11c:	80 e2       	ldi	r24, 0x20	; 32
 11e:	90 e0       	ldi	r25, 0x00	; 0
 120:	60 e0       	ldi	r22, 0x00	; 0
 122:	0e 94 ec 06 	call	0xdd8	; 0xdd8 <EEPROM_enuWriteData>
   u8 Local_u8Tries = Max_Tries;
   u8 i ;

    if(EEPROM_u8ReadeData(EEPROM_Status_Flag)==First_Use) // to check if its the first time to use the safe
    {
	    LCD_enuSendString("Set Password:");
 126:	55 24       	eor	r5, r5
 128:	68 94       	set
 12a:	51 f8       	bld	r5, 1
	    LCD_enuSendString("1- Login");
		LCD_enuGoTo(1,0);
		LCD_enuSendString("2- Reset");
		do
		{
			KEYPAD_enuGetPressedKey(&Local_u8ReadPassword);
 12c:	0f 2e       	mov	r0, r31
 12e:	f5 e0       	ldi	r31, 0x05	; 5
 130:	ef 2e       	mov	r14, r31
 132:	ff 24       	eor	r15, r15
 134:	f0 2d       	mov	r31, r0
 136:	ec 0e       	add	r14, r28
 138:	fd 1e       	adc	r15, r29
				 }
				 else
				 {
					  
					  LCD_enuSendInstruction(LCD_u8_CLEAR_DISPLAY);
					  LCD_enuSendString("Wrong Password");
 13a:	0f 2e       	mov	r0, r31
 13c:	fb ea       	ldi	r31, 0xAB	; 171
 13e:	6f 2e       	mov	r6, r31
 140:	f0 e0       	ldi	r31, 0x00	; 0
 142:	7f 2e       	mov	r7, r31
 144:	f0 2d       	mov	r31, r0
			            for( i =0; i<=3 ; i++)
			            {
			                
			                do
			                {
			           	     KEYPAD_enuGetPressedKey(&Local_u8ReadPassword);
 146:	3e 2c       	mov	r3, r14
 148:	2f 2c       	mov	r2, r15
    }
    
    
    while(Local_u8Flag == 0)
    {
	    LCD_enuSendInstruction(LCD_u8_CLEAR_DISPLAY);
 14a:	81 e0       	ldi	r24, 0x01	; 1
 14c:	0e 94 41 03 	call	0x682	; 0x682 <LCD_enuSendInstruction>
	    
		Local_u8ReadPassword=KEYPAD_u8_NOTPRESSED;
 150:	84 e6       	ldi	r24, 0x64	; 100
 152:	8d 83       	std	Y+5, r24	; 0x05
	    LCD_enuSendString("1- Login");
 154:	8e e6       	ldi	r24, 0x6E	; 110
 156:	90 e0       	ldi	r25, 0x00	; 0
 158:	0e 94 ee 03 	call	0x7dc	; 0x7dc <LCD_enuSendString>
		LCD_enuGoTo(1,0);
 15c:	81 e0       	ldi	r24, 0x01	; 1
 15e:	60 e0       	ldi	r22, 0x00	; 0
 160:	0e 94 d3 03 	call	0x7a6	; 0x7a6 <LCD_enuGoTo>
		LCD_enuSendString("2- Reset");
 164:	87 e7       	ldi	r24, 0x77	; 119
 166:	90 e0       	ldi	r25, 0x00	; 0
 168:	0e 94 ee 03 	call	0x7dc	; 0x7dc <LCD_enuSendString>
		do
		{
			KEYPAD_enuGetPressedKey(&Local_u8ReadPassword);
 16c:	c7 01       	movw	r24, r14
 16e:	0e 94 25 02 	call	0x44a	; 0x44a <KEYPAD_enuGetPressedKey>
			
		} while (Local_u8ReadPassword == KEYPAD_u8_NOTPRESSED);
 172:	8d 81       	ldd	r24, Y+5	; 0x05
 174:	84 36       	cpi	r24, 0x64	; 100
 176:	d1 f3       	breq	.-12     	; 0x16c <main+0xda>
 178:	8f ef       	ldi	r24, 0xFF	; 255
 17a:	9b ed       	ldi	r25, 0xDB	; 219
 17c:	a5 e0       	ldi	r26, 0x05	; 5
 17e:	81 50       	subi	r24, 0x01	; 1
 180:	90 40       	sbci	r25, 0x00	; 0
 182:	a0 40       	sbci	r26, 0x00	; 0
 184:	e1 f7       	brne	.-8      	; 0x17e <main+0xec>
 186:	00 c0       	rjmp	.+0      	; 0x188 <main+0xf6>
 188:	00 00       	nop
		_delay_ms(240);
		if(Local_u8ReadPassword == '1')
 18a:	8d 81       	ldd	r24, Y+5	; 0x05
 18c:	81 33       	cpi	r24, 0x31	; 49
 18e:	09 f0       	breq	.+2      	; 0x192 <main+0x100>
 190:	a1 c0       	rjmp	.+322    	; 0x2d4 <main+0x242>
	   {  
		    LCD_enuSendInstruction(LCD_u8_CLEAR_DISPLAY);
 192:	81 e0       	ldi	r24, 0x01	; 1
 194:	0e 94 41 03 	call	0x682	; 0x682 <LCD_enuSendInstruction>
			LCD_enuSendString("Check Password:");
 198:	80 e8       	ldi	r24, 0x80	; 128
 19a:	90 e0       	ldi	r25, 0x00	; 0
 19c:	0e 94 ee 03 	call	0x7dc	; 0x7dc <LCD_enuSendString>
 1a0:	cc 24       	eor	r12, r12
 1a2:	dd 24       	eor	r13, r13
 1a4:	4c 2c       	mov	r4, r12
	      	   for( i =0 ; i<=3 ; i++)
	      	   {
		      	   do
		      	   {
			      	   KEYPAD_enuGetPressedKey(&Local_au8Password[i]);
 1a6:	01 e0       	ldi	r16, 0x01	; 1
 1a8:	10 e0       	ldi	r17, 0x00	; 0
 1aa:	0c 0f       	add	r16, r28
 1ac:	1d 1f       	adc	r17, r29
 1ae:	0c 0d       	add	r16, r12
 1b0:	1d 1d       	adc	r17, r13
		      	   } while (Local_au8Password[i]==KEYPAD_u8_NOTPRESSED);
 1b2:	9c 2c       	mov	r9, r12
 1b4:	8d 2c       	mov	r8, r13
			LCD_enuSendString("Check Password:");
	      	   for( i =0 ; i<=3 ; i++)
	      	   {
		      	   do
		      	   {
			      	   KEYPAD_enuGetPressedKey(&Local_au8Password[i]);
 1b6:	c8 01       	movw	r24, r16
 1b8:	0e 94 25 02 	call	0x44a	; 0x44a <KEYPAD_enuGetPressedKey>
		      	   } while (Local_au8Password[i]==KEYPAD_u8_NOTPRESSED);
 1bc:	a9 2c       	mov	r10, r9
 1be:	b8 2c       	mov	r11, r8
 1c0:	d8 01       	movw	r26, r16
 1c2:	8c 91       	ld	r24, X
 1c4:	84 36       	cpi	r24, 0x64	; 100
 1c6:	b9 f3       	breq	.-18     	; 0x1b6 <main+0x124>
		    
	           	     LCD_enuGoTo(1,i);
 1c8:	81 e0       	ldi	r24, 0x01	; 1
 1ca:	64 2d       	mov	r22, r4
 1cc:	0e 94 d3 03 	call	0x7a6	; 0x7a6 <LCD_enuGoTo>
	           	     LCD_enuSendCharacter(Local_au8Password[i]);
 1d0:	e1 e0       	ldi	r30, 0x01	; 1
 1d2:	f0 e0       	ldi	r31, 0x00	; 0
 1d4:	ec 0f       	add	r30, r28
 1d6:	fd 1f       	adc	r31, r29
 1d8:	ea 0d       	add	r30, r10
 1da:	fb 1d       	adc	r31, r11
 1dc:	80 81       	ld	r24, Z
 1de:	0e 94 de 02 	call	0x5bc	; 0x5bc <LCD_enuSendCharacter>
 1e2:	8f ef       	ldi	r24, 0xFF	; 255
 1e4:	94 e3       	ldi	r25, 0x34	; 52
 1e6:	ac e0       	ldi	r26, 0x0C	; 12
 1e8:	81 50       	subi	r24, 0x01	; 1
 1ea:	90 40       	sbci	r25, 0x00	; 0
 1ec:	a0 40       	sbci	r26, 0x00	; 0
 1ee:	e1 f7       	brne	.-8      	; 0x1e8 <main+0x156>
 1f0:	00 c0       	rjmp	.+0      	; 0x1f2 <main+0x160>
 1f2:	00 00       	nop
					 _delay_ms(500);
					   LCD_enuGoTo(1,i);
 1f4:	81 e0       	ldi	r24, 0x01	; 1
 1f6:	64 2d       	mov	r22, r4
 1f8:	0e 94 d3 03 	call	0x7a6	; 0x7a6 <LCD_enuGoTo>
	        	    LCD_enuSendCharacter('*');
 1fc:	8a e2       	ldi	r24, 0x2A	; 42
 1fe:	0e 94 de 02 	call	0x5bc	; 0x5bc <LCD_enuSendCharacter>
 202:	08 94       	sec
 204:	c1 1c       	adc	r12, r1
 206:	d1 1c       	adc	r13, r1
		_delay_ms(240);
		if(Local_u8ReadPassword == '1')
	   {  
		    LCD_enuSendInstruction(LCD_u8_CLEAR_DISPLAY);
			LCD_enuSendString("Check Password:");
	      	   for( i =0 ; i<=3 ; i++)
 208:	94 e0       	ldi	r25, 0x04	; 4
 20a:	c9 16       	cp	r12, r25
 20c:	d1 04       	cpc	r13, r1
 20e:	51 f6       	brne	.-108    	; 0x1a4 <main+0x112>
					 _delay_ms(500);
					   LCD_enuGoTo(1,i);
	        	    LCD_enuSendCharacter('*');
	             }
	            
	            if((EEPROM_u8ReadeData(EEPROM_PASSWORD_LOCATION1)==Local_au8Password[0]) &&  (EEPROM_u8ReadeData(EEPROM_PASSWORD_LOCATION2)==Local_au8Password[1]) && (EEPROM_u8ReadeData(EEPROM_PASSWORD_LOCATION3)==Local_au8Password[2]) && (EEPROM_u8ReadeData(EEPROM_PASSWORD_LOCATION4)==Local_au8Password[3]) )
 210:	81 e2       	ldi	r24, 0x21	; 33
 212:	90 e0       	ldi	r25, 0x00	; 0
 214:	0e 94 f6 06 	call	0xdec	; 0xdec <EEPROM_u8ReadeData>
 218:	99 81       	ldd	r25, Y+1	; 0x01
 21a:	89 17       	cp	r24, r25
 21c:	29 f5       	brne	.+74     	; 0x268 <main+0x1d6>
 21e:	82 e2       	ldi	r24, 0x22	; 34
 220:	90 e0       	ldi	r25, 0x00	; 0
 222:	0e 94 f6 06 	call	0xdec	; 0xdec <EEPROM_u8ReadeData>
 226:	9a 81       	ldd	r25, Y+2	; 0x02
 228:	89 17       	cp	r24, r25
 22a:	f1 f4       	brne	.+60     	; 0x268 <main+0x1d6>
 22c:	83 e2       	ldi	r24, 0x23	; 35
 22e:	90 e0       	ldi	r25, 0x00	; 0
 230:	0e 94 f6 06 	call	0xdec	; 0xdec <EEPROM_u8ReadeData>
 234:	9b 81       	ldd	r25, Y+3	; 0x03
 236:	89 17       	cp	r24, r25
 238:	b9 f4       	brne	.+46     	; 0x268 <main+0x1d6>
 23a:	84 e2       	ldi	r24, 0x24	; 36
 23c:	90 e0       	ldi	r25, 0x00	; 0
 23e:	0e 94 f6 06 	call	0xdec	; 0xdec <EEPROM_u8ReadeData>
 242:	9c 81       	ldd	r25, Y+4	; 0x04
 244:	89 17       	cp	r24, r25
 246:	81 f4       	brne	.+32     	; 0x268 <main+0x1d6>
	            {
		            LCD_enuSendInstruction(LCD_u8_CLEAR_DISPLAY);
 248:	81 e0       	ldi	r24, 0x01	; 1
 24a:	0e 94 41 03 	call	0x682	; 0x682 <LCD_enuSendInstruction>
		            LCD_enuSendString("Right Password");
 24e:	80 e9       	ldi	r24, 0x90	; 144
 250:	90 e0       	ldi	r25, 0x00	; 0
 252:	0e 94 ee 03 	call	0x7dc	; 0x7dc <LCD_enuSendString>
		            LCD_enuGoTo(1,0);
 256:	81 e0       	ldi	r24, 0x01	; 1
 258:	60 e0       	ldi	r22, 0x00	; 0
 25a:	0e 94 d3 03 	call	0x7a6	; 0x7a6 <LCD_enuGoTo>
		            LCD_enuSendString("Safe Opened");
 25e:	8f e9       	ldi	r24, 0x9F	; 159
 260:	90 e0       	ldi	r25, 0x00	; 0
 262:	0e 94 ee 03 	call	0x7dc	; 0x7dc <LCD_enuSendString>
		            Local_u8Flag=1;
 266:	ed c0       	rjmp	.+474    	; 0x442 <main+0x3b0>
	            }
	            else
	            {
		              Local_u8Tries--;
 268:	5a 94       	dec	r5
		       		if(Local_u8Tries>0)
 26a:	21 f1       	breq	.+72     	; 0x2b4 <main+0x222>
	         	       {   
	       	         	  LCD_enuSendInstruction(LCD_u8_CLEAR_DISPLAY);
 26c:	81 e0       	ldi	r24, 0x01	; 1
 26e:	0e 94 41 03 	call	0x682	; 0x682 <LCD_enuSendInstruction>
	       	              LCD_enuSendString("Wrong Password");
 272:	c3 01       	movw	r24, r6
 274:	0e 94 ee 03 	call	0x7dc	; 0x7dc <LCD_enuSendString>
 278:	8f ef       	ldi	r24, 0xFF	; 255
 27a:	99 e6       	ldi	r25, 0x69	; 105
 27c:	a8 e1       	ldi	r26, 0x18	; 24
 27e:	81 50       	subi	r24, 0x01	; 1
 280:	90 40       	sbci	r25, 0x00	; 0
 282:	a0 40       	sbci	r26, 0x00	; 0
 284:	e1 f7       	brne	.-8      	; 0x27e <main+0x1ec>
 286:	00 c0       	rjmp	.+0      	; 0x288 <main+0x1f6>
 288:	00 00       	nop
	       	              _delay_ms(1000);
	       	              LCD_enuSendInstruction(LCD_u8_CLEAR_DISPLAY);
 28a:	81 e0       	ldi	r24, 0x01	; 1
 28c:	0e 94 41 03 	call	0x682	; 0x682 <LCD_enuSendInstruction>
	             	      LCD_enuSendString("Tries Left:");
 290:	8a eb       	ldi	r24, 0xBA	; 186
 292:	90 e0       	ldi	r25, 0x00	; 0
 294:	0e 94 ee 03 	call	0x7dc	; 0x7dc <LCD_enuSendString>
	             	      LCD_enuSendCharacter(Local_u8Tries+48);
 298:	85 2d       	mov	r24, r5
 29a:	80 5d       	subi	r24, 0xD0	; 208
 29c:	0e 94 de 02 	call	0x5bc	; 0x5bc <LCD_enuSendCharacter>
 2a0:	8f ef       	ldi	r24, 0xFF	; 255
 2a2:	99 e6       	ldi	r25, 0x69	; 105
 2a4:	a8 e1       	ldi	r26, 0x18	; 24
 2a6:	81 50       	subi	r24, 0x01	; 1
 2a8:	90 40       	sbci	r25, 0x00	; 0
 2aa:	a0 40       	sbci	r26, 0x00	; 0
 2ac:	e1 f7       	brne	.-8      	; 0x2a6 <main+0x214>
 2ae:	00 c0       	rjmp	.+0      	; 0x2b0 <main+0x21e>
 2b0:	00 00       	nop
 2b2:	4b cf       	rjmp	.-362    	; 0x14a <main+0xb8>
	             	      _delay_ms(1000);
	            	   }
	       	         else
	       	           {
	       		           LCD_enuSendInstruction(LCD_u8_CLEAR_DISPLAY);
 2b4:	81 e0       	ldi	r24, 0x01	; 1
 2b6:	0e 94 41 03 	call	0x682	; 0x682 <LCD_enuSendInstruction>
	       		           LCD_enuSendString("Wrong Password");
 2ba:	8b ea       	ldi	r24, 0xAB	; 171
 2bc:	90 e0       	ldi	r25, 0x00	; 0
 2be:	0e 94 ee 03 	call	0x7dc	; 0x7dc <LCD_enuSendString>
	       		           LCD_enuGoTo(1,0);
 2c2:	81 e0       	ldi	r24, 0x01	; 1
 2c4:	60 e0       	ldi	r22, 0x00	; 0
 2c6:	0e 94 d3 03 	call	0x7a6	; 0x7a6 <LCD_enuGoTo>
	       		           LCD_enuSendString("Safe Closed");
 2ca:	86 ec       	ldi	r24, 0xC6	; 198
 2cc:	90 e0       	ldi	r25, 0x00	; 0
 2ce:	0e 94 ee 03 	call	0x7dc	; 0x7dc <LCD_enuSendString>
 2d2:	b7 c0       	rjmp	.+366    	; 0x442 <main+0x3b0>
	       		           Local_u8Flag=1;
	       	           }			  
	           }
		  }
		  else if(Local_u8ReadPassword == '2')	
 2d4:	82 33       	cpi	r24, 0x32	; 50
 2d6:	09 f0       	breq	.+2      	; 0x2da <main+0x248>
 2d8:	a3 c0       	rjmp	.+326    	; 0x420 <main+0x38e>
		  {
			   LCD_enuSendInstruction(LCD_u8_CLEAR_DISPLAY);
 2da:	81 e0       	ldi	r24, 0x01	; 1
 2dc:	0e 94 41 03 	call	0x682	; 0x682 <LCD_enuSendInstruction>
			     LCD_enuSendString("old Password:");
 2e0:	82 ed       	ldi	r24, 0xD2	; 210
 2e2:	90 e0       	ldi	r25, 0x00	; 0
 2e4:	0e 94 ee 03 	call	0x7dc	; 0x7dc <LCD_enuSendString>
 2e8:	aa 24       	eor	r10, r10
 2ea:	bb 24       	eor	r11, r11
 2ec:	4a 2c       	mov	r4, r10
				    for( i =0 ; i<=3 ; i++)
				    {
					    do
					    {
						    KEYPAD_enuGetPressedKey(&Local_au8Password[i]);
 2ee:	01 e0       	ldi	r16, 0x01	; 1
 2f0:	10 e0       	ldi	r17, 0x00	; 0
 2f2:	0c 0f       	add	r16, r28
 2f4:	1d 1f       	adc	r17, r29
 2f6:	0a 0d       	add	r16, r10
 2f8:	1b 1d       	adc	r17, r11
					    } while (Local_au8Password[i]==KEYPAD_u8_NOTPRESSED);
 2fa:	9a 2c       	mov	r9, r10
 2fc:	8b 2c       	mov	r8, r11
			     LCD_enuSendString("old Password:");
				    for( i =0 ; i<=3 ; i++)
				    {
					    do
					    {
						    KEYPAD_enuGetPressedKey(&Local_au8Password[i]);
 2fe:	c8 01       	movw	r24, r16
 300:	0e 94 25 02 	call	0x44a	; 0x44a <KEYPAD_enuGetPressedKey>
					    } while (Local_au8Password[i]==KEYPAD_u8_NOTPRESSED);
 304:	c9 2c       	mov	r12, r9
 306:	d8 2c       	mov	r13, r8
 308:	d8 01       	movw	r26, r16
 30a:	8c 91       	ld	r24, X
 30c:	84 36       	cpi	r24, 0x64	; 100
 30e:	b9 f3       	breq	.-18     	; 0x2fe <main+0x26c>
					    
					    LCD_enuGoTo(1,i);
 310:	81 e0       	ldi	r24, 0x01	; 1
 312:	64 2d       	mov	r22, r4
 314:	0e 94 d3 03 	call	0x7a6	; 0x7a6 <LCD_enuGoTo>
					    LCD_enuSendCharacter(Local_au8Password[i]);
 318:	e1 e0       	ldi	r30, 0x01	; 1
 31a:	f0 e0       	ldi	r31, 0x00	; 0
 31c:	ec 0f       	add	r30, r28
 31e:	fd 1f       	adc	r31, r29
 320:	ec 0d       	add	r30, r12
 322:	fd 1d       	adc	r31, r13
 324:	80 81       	ld	r24, Z
 326:	0e 94 de 02 	call	0x5bc	; 0x5bc <LCD_enuSendCharacter>
 32a:	8f ef       	ldi	r24, 0xFF	; 255
 32c:	94 e3       	ldi	r25, 0x34	; 52
 32e:	ac e0       	ldi	r26, 0x0C	; 12
 330:	81 50       	subi	r24, 0x01	; 1
 332:	90 40       	sbci	r25, 0x00	; 0
 334:	a0 40       	sbci	r26, 0x00	; 0
 336:	e1 f7       	brne	.-8      	; 0x330 <main+0x29e>
 338:	00 c0       	rjmp	.+0      	; 0x33a <main+0x2a8>
 33a:	00 00       	nop
					    _delay_ms(500);
					    LCD_enuGoTo(1,i);
 33c:	81 e0       	ldi	r24, 0x01	; 1
 33e:	64 2d       	mov	r22, r4
 340:	0e 94 d3 03 	call	0x7a6	; 0x7a6 <LCD_enuGoTo>
					    LCD_enuSendCharacter('*');
 344:	8a e2       	ldi	r24, 0x2A	; 42
 346:	0e 94 de 02 	call	0x5bc	; 0x5bc <LCD_enuSendCharacter>
 34a:	08 94       	sec
 34c:	a1 1c       	adc	r10, r1
 34e:	b1 1c       	adc	r11, r1
		  }
		  else if(Local_u8ReadPassword == '2')	
		  {
			   LCD_enuSendInstruction(LCD_u8_CLEAR_DISPLAY);
			     LCD_enuSendString("old Password:");
				    for( i =0 ; i<=3 ; i++)
 350:	94 e0       	ldi	r25, 0x04	; 4
 352:	a9 16       	cp	r10, r25
 354:	b1 04       	cpc	r11, r1
 356:	51 f6       	brne	.-108    	; 0x2ec <main+0x25a>
					    LCD_enuGoTo(1,i);
					    LCD_enuSendCharacter('*');
				    }
				 
				 
				   if((EEPROM_u8ReadeData(EEPROM_PASSWORD_LOCATION1)==Local_au8Password[0]) &&  (EEPROM_u8ReadeData(EEPROM_PASSWORD_LOCATION2)==Local_au8Password[1]) && (EEPROM_u8ReadeData(EEPROM_PASSWORD_LOCATION3)==Local_au8Password[2]) && (EEPROM_u8ReadeData(EEPROM_PASSWORD_LOCATION4)==Local_au8Password[3]) )
 358:	81 e2       	ldi	r24, 0x21	; 33
 35a:	90 e0       	ldi	r25, 0x00	; 0
 35c:	0e 94 f6 06 	call	0xdec	; 0xdec <EEPROM_u8ReadeData>
 360:	99 81       	ldd	r25, Y+1	; 0x01
 362:	89 17       	cp	r24, r25
 364:	09 f0       	breq	.+2      	; 0x368 <main+0x2d6>
 366:	4c c0       	rjmp	.+152    	; 0x400 <main+0x36e>
 368:	82 e2       	ldi	r24, 0x22	; 34
 36a:	90 e0       	ldi	r25, 0x00	; 0
 36c:	0e 94 f6 06 	call	0xdec	; 0xdec <EEPROM_u8ReadeData>
 370:	9a 81       	ldd	r25, Y+2	; 0x02
 372:	89 17       	cp	r24, r25
 374:	09 f0       	breq	.+2      	; 0x378 <main+0x2e6>
 376:	44 c0       	rjmp	.+136    	; 0x400 <main+0x36e>
 378:	83 e2       	ldi	r24, 0x23	; 35
 37a:	90 e0       	ldi	r25, 0x00	; 0
 37c:	0e 94 f6 06 	call	0xdec	; 0xdec <EEPROM_u8ReadeData>
 380:	9b 81       	ldd	r25, Y+3	; 0x03
 382:	89 17       	cp	r24, r25
 384:	e9 f5       	brne	.+122    	; 0x400 <main+0x36e>
 386:	84 e2       	ldi	r24, 0x24	; 36
 388:	90 e0       	ldi	r25, 0x00	; 0
 38a:	0e 94 f6 06 	call	0xdec	; 0xdec <EEPROM_u8ReadeData>
 38e:	9c 81       	ldd	r25, Y+4	; 0x04
 390:	89 17       	cp	r24, r25
 392:	b1 f5       	brne	.+108    	; 0x400 <main+0x36e>
				   { 
					    LCD_enuSendInstruction(LCD_u8_CLEAR_DISPLAY);
 394:	81 e0       	ldi	r24, 0x01	; 1
 396:	0e 94 41 03 	call	0x682	; 0x682 <LCD_enuSendInstruction>
			            LCD_enuSendString("New Password:");
 39a:	80 ee       	ldi	r24, 0xE0	; 224
 39c:	90 e0       	ldi	r25, 0x00	; 0
 39e:	0e 94 ee 03 	call	0x7dc	; 0x7dc <LCD_enuSendString>
 3a2:	01 e2       	ldi	r16, 0x21	; 33
 3a4:	10 e0       	ldi	r17, 0x00	; 0
#define EEPROM_PASSWORD_LOCATION3 0x23
#define EEPROM_PASSWORD_LOCATION4 0x24
#define First_Use                 0XFF
#define Entered_The_Safe          0x00
#define Max_Tries                 2
int main(void)
 3a6:	0f 2e       	mov	r0, r31
 3a8:	ff ed       	ldi	r31, 0xDF	; 223
 3aa:	cf 2e       	mov	r12, r31
 3ac:	f0 2d       	mov	r31, r0
 3ae:	c0 0e       	add	r12, r16
			            for( i =0; i<=3 ; i++)
			            {
			                
			                do
			                {
			           	     KEYPAD_enuGetPressedKey(&Local_u8ReadPassword);
 3b0:	83 2d       	mov	r24, r3
 3b2:	92 2d       	mov	r25, r2
 3b4:	0e 94 25 02 	call	0x44a	; 0x44a <KEYPAD_enuGetPressedKey>
			           	     
			                } while (Local_u8ReadPassword == KEYPAD_u8_NOTPRESSED);
 3b8:	8d 81       	ldd	r24, Y+5	; 0x05
 3ba:	84 36       	cpi	r24, 0x64	; 100
 3bc:	c9 f3       	breq	.-14     	; 0x3b0 <main+0x31e>
			                
			                LCD_enuGoTo(1,i);
 3be:	81 e0       	ldi	r24, 0x01	; 1
 3c0:	6c 2d       	mov	r22, r12
 3c2:	0e 94 d3 03 	call	0x7a6	; 0x7a6 <LCD_enuGoTo>
			                LCD_enuSendCharacter(Local_u8ReadPassword);
 3c6:	8d 81       	ldd	r24, Y+5	; 0x05
 3c8:	0e 94 de 02 	call	0x5bc	; 0x5bc <LCD_enuSendCharacter>
 3cc:	8f ef       	ldi	r24, 0xFF	; 255
 3ce:	94 e3       	ldi	r25, 0x34	; 52
 3d0:	ac e0       	ldi	r26, 0x0C	; 12
 3d2:	81 50       	subi	r24, 0x01	; 1
 3d4:	90 40       	sbci	r25, 0x00	; 0
 3d6:	a0 40       	sbci	r26, 0x00	; 0
 3d8:	e1 f7       	brne	.-8      	; 0x3d2 <main+0x340>
 3da:	00 c0       	rjmp	.+0      	; 0x3dc <main+0x34a>
 3dc:	00 00       	nop
			                _delay_ms(500);
			                LCD_enuGoTo(1,i);
 3de:	81 e0       	ldi	r24, 0x01	; 1
 3e0:	6c 2d       	mov	r22, r12
 3e2:	0e 94 d3 03 	call	0x7a6	; 0x7a6 <LCD_enuGoTo>
			                LCD_enuSendCharacter('*');
 3e6:	8a e2       	ldi	r24, 0x2A	; 42
 3e8:	0e 94 de 02 	call	0x5bc	; 0x5bc <LCD_enuSendCharacter>
			                EEPROM_enuWriteData(EEPROM_PASSWORD_LOCATION1+i,Local_u8ReadPassword);
 3ec:	c8 01       	movw	r24, r16
 3ee:	6d 81       	ldd	r22, Y+5	; 0x05
 3f0:	0e 94 ec 06 	call	0xdd8	; 0xdd8 <EEPROM_enuWriteData>
 3f4:	0f 5f       	subi	r16, 0xFF	; 255
 3f6:	1f 4f       	sbci	r17, 0xFF	; 255
				 
				   if((EEPROM_u8ReadeData(EEPROM_PASSWORD_LOCATION1)==Local_au8Password[0]) &&  (EEPROM_u8ReadeData(EEPROM_PASSWORD_LOCATION2)==Local_au8Password[1]) && (EEPROM_u8ReadeData(EEPROM_PASSWORD_LOCATION3)==Local_au8Password[2]) && (EEPROM_u8ReadeData(EEPROM_PASSWORD_LOCATION4)==Local_au8Password[3]) )
				   { 
					    LCD_enuSendInstruction(LCD_u8_CLEAR_DISPLAY);
			            LCD_enuSendString("New Password:");
			            for( i =0; i<=3 ; i++)
 3f8:	05 32       	cpi	r16, 0x25	; 37
 3fa:	11 05       	cpc	r17, r1
 3fc:	a1 f6       	brne	.-88     	; 0x3a6 <main+0x314>
 3fe:	a5 ce       	rjmp	.-694    	; 0x14a <main+0xb8>
			             }
				 }
				 else
				 {
					  
					  LCD_enuSendInstruction(LCD_u8_CLEAR_DISPLAY);
 400:	81 e0       	ldi	r24, 0x01	; 1
 402:	0e 94 41 03 	call	0x682	; 0x682 <LCD_enuSendInstruction>
					  LCD_enuSendString("Wrong Password");
 406:	c3 01       	movw	r24, r6
 408:	0e 94 ee 03 	call	0x7dc	; 0x7dc <LCD_enuSendString>
 40c:	8f ef       	ldi	r24, 0xFF	; 255
 40e:	99 e6       	ldi	r25, 0x69	; 105
 410:	a8 e1       	ldi	r26, 0x18	; 24
 412:	81 50       	subi	r24, 0x01	; 1
 414:	90 40       	sbci	r25, 0x00	; 0
 416:	a0 40       	sbci	r26, 0x00	; 0
 418:	e1 f7       	brne	.-8      	; 0x412 <main+0x380>
 41a:	00 c0       	rjmp	.+0      	; 0x41c <main+0x38a>
 41c:	00 00       	nop
 41e:	95 ce       	rjmp	.-726    	; 0x14a <main+0xb8>
					  _delay_ms(1000);
				 }				 
		  }	
		  else 
		  {
			   LCD_enuSendInstruction(LCD_u8_CLEAR_DISPLAY);
 420:	81 e0       	ldi	r24, 0x01	; 1
 422:	0e 94 41 03 	call	0x682	; 0x682 <LCD_enuSendInstruction>
			   LCD_enuSendString("Wrong Choice");
 426:	8e ee       	ldi	r24, 0xEE	; 238
 428:	90 e0       	ldi	r25, 0x00	; 0
 42a:	0e 94 ee 03 	call	0x7dc	; 0x7dc <LCD_enuSendString>
 42e:	8f ef       	ldi	r24, 0xFF	; 255
 430:	99 e6       	ldi	r25, 0x69	; 105
 432:	a8 e1       	ldi	r26, 0x18	; 24
 434:	81 50       	subi	r24, 0x01	; 1
 436:	90 40       	sbci	r25, 0x00	; 0
 438:	a0 40       	sbci	r26, 0x00	; 0
 43a:	e1 f7       	brne	.-8      	; 0x434 <main+0x3a2>
 43c:	00 c0       	rjmp	.+0      	; 0x43e <main+0x3ac>
 43e:	00 00       	nop
 440:	84 ce       	rjmp	.-760    	; 0x14a <main+0xb8>
 442:	ff cf       	rjmp	.-2      	; 0x442 <main+0x3b0>

00000444 <KEYPAD_vidInit>:
#include "KEYPAD_int.h"
#include "KEYPAD_cfg.h"

void KEYPAD_vidInit()
{
  DIO_vidInit();
 444:	0e 94 42 05 	call	0xa84	; 0xa84 <DIO_vidInit>
}
 448:	08 95       	ret

0000044a <KEYPAD_enuGetPressedKey>:
extern u8  KEYPAD_au8ColsPins[KEYPAD_u8_COLS_NUM];
extern  u8 KEYPAD_au8ColsPORT[KEYPAD_u8_COLS_NUM];


KEYPAD_tenuErrorStatus KEYPAD_enuGetPressedKey(u8 *Add_u8KeyValue)
{
 44a:	2f 92       	push	r2
 44c:	3f 92       	push	r3
 44e:	4f 92       	push	r4
 450:	5f 92       	push	r5
 452:	6f 92       	push	r6
 454:	7f 92       	push	r7
 456:	8f 92       	push	r8
 458:	9f 92       	push	r9
 45a:	af 92       	push	r10
 45c:	bf 92       	push	r11
 45e:	cf 92       	push	r12
 460:	df 92       	push	r13
 462:	ef 92       	push	r14
 464:	ff 92       	push	r15
 466:	0f 93       	push	r16
 468:	1f 93       	push	r17
 46a:	cf 93       	push	r28
 46c:	df 93       	push	r29
 46e:	cd b7       	in	r28, 0x3d	; 61
 470:	de b7       	in	r29, 0x3e	; 62
 472:	27 97       	sbiw	r28, 0x07	; 7
 474:	0f b6       	in	r0, 0x3f	; 63
 476:	f8 94       	cli
 478:	de bf       	out	0x3e, r29	; 62
 47a:	0f be       	out	0x3f, r0	; 63
 47c:	cd bf       	out	0x3d, r28	; 61
 47e:	1c 01       	movw	r2, r24
	KEYPAD_tenuErrorStatus Local_enuErrorStatus = KEYPAD_OK;
	u8 Local_u8RowIterator=0;
	u8 Local_u8ColIterator=0;
    u8 Local_u8Test=0;
 480:	19 82       	std	Y+1, r1	; 0x01

    if (Add_u8KeyValue == NULL)
 482:	00 97       	sbiw	r24, 0x00	; 0
 484:	09 f4       	brne	.+2      	; 0x488 <KEYPAD_enuGetPressedKey+0x3e>
 486:	6d c0       	rjmp	.+218    	; 0x562 <KEYPAD_enuGetPressedKey+0x118>
    	Local_enuErrorStatus=KEYPAD_NOK;
    else
    {
    	*Add_u8KeyValue=KEYPAD_u8_NOTPRESSED;
 488:	84 e6       	ldi	r24, 0x64	; 100
 48a:	f1 01       	movw	r30, r2
 48c:	80 83       	st	Z, r24
 48e:	0f 2e       	mov	r0, r31
 490:	f3 e0       	ldi	r31, 0x03	; 3
 492:	af 2e       	mov	r10, r31
 494:	f1 e0       	ldi	r31, 0x01	; 1
 496:	bf 2e       	mov	r11, r31
 498:	f0 2d       	mov	r31, r0
 49a:	0f 2e       	mov	r0, r31
 49c:	f7 e0       	ldi	r31, 0x07	; 7
 49e:	8f 2e       	mov	r8, r31
 4a0:	f1 e0       	ldi	r31, 0x01	; 1
 4a2:	9f 2e       	mov	r9, r31
 4a4:	f0 2d       	mov	r31, r0
 4a6:	66 24       	eor	r6, r6
 4a8:	77 24       	eor	r7, r7
	         	for(Local_u8ColIterator=0 ; Local_u8ColIterator<KEYPAD_u8_COLS_NUM ; Local_u8ColIterator++)
	         		{
                            DIO_enuGetPinValue(KEYPAD_au8ColsPORT[Local_u8ColIterator],KEYPAD_au8ColsPins[Local_u8ColIterator],&Local_u8Test);
                            if(Local_u8Test==0)
                            {
                         	   *Add_u8KeyValue=KEYPAD_au8Buttons[Local_u8RowIterator][Local_u8ColIterator];
 4aa:	3d 82       	std	Y+5, r3	; 0x05
 4ac:	2c 82       	std	Y+4, r2	; 0x04
    else
    {
    	*Add_u8KeyValue=KEYPAD_u8_NOTPRESSED;
        	for(Local_u8RowIterator=0 ; Local_u8RowIterator<KEYPAD_u8_ROWS_NUM ; Local_u8RowIterator++)
	         {
	         	DIO_enuSetPinValue(KEYPAD_au8RowsPORT[Local_u8RowIterator],KEYPAD_au8RowsPins[Local_u8RowIterator],DIO_u8_LOW);
 4ae:	7f 82       	std	Y+7, r7	; 0x07
 4b0:	6e 82       	std	Y+6, r6	; 0x06

extern u8  KEYPAD_au8ColsPins[KEYPAD_u8_COLS_NUM];
extern  u8 KEYPAD_au8ColsPORT[KEYPAD_u8_COLS_NUM];


KEYPAD_tenuErrorStatus KEYPAD_enuGetPressedKey(u8 *Add_u8KeyValue)
 4b2:	15 01       	movw	r2, r10
 4b4:	9b 82       	std	Y+3, r9	; 0x03
 4b6:	8a 82       	std	Y+2, r8	; 0x02
    else
    {
    	*Add_u8KeyValue=KEYPAD_u8_NOTPRESSED;
        	for(Local_u8RowIterator=0 ; Local_u8RowIterator<KEYPAD_u8_ROWS_NUM ; Local_u8RowIterator++)
	         {
	         	DIO_enuSetPinValue(KEYPAD_au8RowsPORT[Local_u8RowIterator],KEYPAD_au8RowsPins[Local_u8RowIterator],DIO_u8_LOW);
 4b8:	f5 01       	movw	r30, r10
 4ba:	80 81       	ld	r24, Z
 4bc:	f4 01       	movw	r30, r8
 4be:	60 81       	ld	r22, Z
 4c0:	40 e0       	ldi	r20, 0x00	; 0
 4c2:	0e 94 4e 05 	call	0xa9c	; 0xa9c <DIO_enuSetPinValue>
 4c6:	0f 2e       	mov	r0, r31
 4c8:	fb ef       	ldi	r31, 0xFB	; 251
 4ca:	ef 2e       	mov	r14, r31
 4cc:	f0 e0       	ldi	r31, 0x00	; 0
 4ce:	ff 2e       	mov	r15, r31
 4d0:	f0 2d       	mov	r31, r0
 4d2:	0f 2e       	mov	r0, r31
 4d4:	ff ef       	ldi	r31, 0xFF	; 255
 4d6:	cf 2e       	mov	r12, r31
 4d8:	f0 e0       	ldi	r31, 0x00	; 0
 4da:	df 2e       	mov	r13, r31
 4dc:	f0 2d       	mov	r31, r0
 4de:	00 e0       	ldi	r16, 0x00	; 0
 4e0:	10 e0       	ldi	r17, 0x00	; 0
	         	for(Local_u8ColIterator=0 ; Local_u8ColIterator<KEYPAD_u8_COLS_NUM ; Local_u8ColIterator++)
	         		{
                            DIO_enuGetPinValue(KEYPAD_au8ColsPORT[Local_u8ColIterator],KEYPAD_au8ColsPins[Local_u8ColIterator],&Local_u8Test);
 4e2:	f6 01       	movw	r30, r12
 4e4:	61 91       	ld	r22, Z+
 4e6:	6f 01       	movw	r12, r30
 4e8:	f7 01       	movw	r30, r14
 4ea:	81 91       	ld	r24, Z+
 4ec:	7f 01       	movw	r14, r30
 4ee:	ae 01       	movw	r20, r28
 4f0:	4f 5f       	subi	r20, 0xFF	; 255
 4f2:	5f 4f       	sbci	r21, 0xFF	; 255
 4f4:	0e 94 e4 05 	call	0xbc8	; 0xbc8 <DIO_enuGetPinValue>
                            if(Local_u8Test==0)
 4f8:	89 81       	ldd	r24, Y+1	; 0x01
 4fa:	88 23       	and	r24, r24
 4fc:	81 f4       	brne	.+32     	; 0x51e <KEYPAD_enuGetPressedKey+0xd4>
                            {
                         	   *Add_u8KeyValue=KEYPAD_au8Buttons[Local_u8RowIterator][Local_u8ColIterator];
 4fe:	8e 81       	ldd	r24, Y+6	; 0x06
 500:	9f 81       	ldd	r25, Y+7	; 0x07
 502:	88 0f       	add	r24, r24
 504:	99 1f       	adc	r25, r25
 506:	88 0f       	add	r24, r24
 508:	99 1f       	adc	r25, r25
 50a:	80 0f       	add	r24, r16
 50c:	91 1f       	adc	r25, r17
 50e:	85 5f       	subi	r24, 0xF5	; 245
 510:	9e 4f       	sbci	r25, 0xFE	; 254
 512:	fc 01       	movw	r30, r24
 514:	80 81       	ld	r24, Z
 516:	ec 81       	ldd	r30, Y+4	; 0x04
 518:	fd 81       	ldd	r31, Y+5	; 0x05
 51a:	80 83       	st	Z, r24
                         	   break;
 51c:	05 c0       	rjmp	.+10     	; 0x528 <KEYPAD_enuGetPressedKey+0xde>
 51e:	0f 5f       	subi	r16, 0xFF	; 255
 520:	1f 4f       	sbci	r17, 0xFF	; 255
    {
    	*Add_u8KeyValue=KEYPAD_u8_NOTPRESSED;
        	for(Local_u8RowIterator=0 ; Local_u8RowIterator<KEYPAD_u8_ROWS_NUM ; Local_u8RowIterator++)
	         {
	         	DIO_enuSetPinValue(KEYPAD_au8RowsPORT[Local_u8RowIterator],KEYPAD_au8RowsPins[Local_u8RowIterator],DIO_u8_LOW);
	         	for(Local_u8ColIterator=0 ; Local_u8ColIterator<KEYPAD_u8_COLS_NUM ; Local_u8ColIterator++)
 522:	04 30       	cpi	r16, 0x04	; 4
 524:	11 05       	cpc	r17, r1
 526:	e9 f6       	brne	.-70     	; 0x4e2 <KEYPAD_enuGetPressedKey+0x98>
 528:	08 94       	sec
 52a:	a1 1c       	adc	r10, r1
 52c:	b1 1c       	adc	r11, r1
 52e:	08 94       	sec
 530:	81 1c       	adc	r8, r1
 532:	91 1c       	adc	r9, r1
                            {
                         	   *Add_u8KeyValue=KEYPAD_au8Buttons[Local_u8RowIterator][Local_u8ColIterator];
                         	   break;
                            }
	         		}
	         	DIO_enuSetPinValue(KEYPAD_au8RowsPORT[Local_u8RowIterator],KEYPAD_au8RowsPins[Local_u8RowIterator],DIO_u8_HIGH);
 534:	f1 01       	movw	r30, r2
 536:	80 81       	ld	r24, Z
 538:	ea 81       	ldd	r30, Y+2	; 0x02
 53a:	fb 81       	ldd	r31, Y+3	; 0x03
 53c:	60 81       	ld	r22, Z
 53e:	41 e0       	ldi	r20, 0x01	; 1
 540:	0e 94 4e 05 	call	0xa9c	; 0xa9c <DIO_enuSetPinValue>
	         	if(*Add_u8KeyValue!=KEYPAD_u8_NOTPRESSED)
 544:	ec 81       	ldd	r30, Y+4	; 0x04
 546:	fd 81       	ldd	r31, Y+5	; 0x05
 548:	80 81       	ld	r24, Z
 54a:	84 36       	cpi	r24, 0x64	; 100
 54c:	61 f4       	brne	.+24     	; 0x566 <KEYPAD_enuGetPressedKey+0x11c>
 54e:	08 94       	sec
 550:	61 1c       	adc	r6, r1
 552:	71 1c       	adc	r7, r1
    if (Add_u8KeyValue == NULL)
    	Local_enuErrorStatus=KEYPAD_NOK;
    else
    {
    	*Add_u8KeyValue=KEYPAD_u8_NOTPRESSED;
        	for(Local_u8RowIterator=0 ; Local_u8RowIterator<KEYPAD_u8_ROWS_NUM ; Local_u8RowIterator++)
 554:	f4 e0       	ldi	r31, 0x04	; 4
 556:	6f 16       	cp	r6, r31
 558:	71 04       	cpc	r7, r1
 55a:	09 f0       	breq	.+2      	; 0x55e <KEYPAD_enuGetPressedKey+0x114>
 55c:	a8 cf       	rjmp	.-176    	; 0x4ae <KEYPAD_enuGetPressedKey+0x64>
extern  u8 KEYPAD_au8ColsPORT[KEYPAD_u8_COLS_NUM];


KEYPAD_tenuErrorStatus KEYPAD_enuGetPressedKey(u8 *Add_u8KeyValue)
{
	KEYPAD_tenuErrorStatus Local_enuErrorStatus = KEYPAD_OK;
 55e:	80 e0       	ldi	r24, 0x00	; 0
 560:	03 c0       	rjmp	.+6      	; 0x568 <KEYPAD_enuGetPressedKey+0x11e>
	u8 Local_u8RowIterator=0;
	u8 Local_u8ColIterator=0;
    u8 Local_u8Test=0;

    if (Add_u8KeyValue == NULL)
    	Local_enuErrorStatus=KEYPAD_NOK;
 562:	81 e0       	ldi	r24, 0x01	; 1
 564:	01 c0       	rjmp	.+2      	; 0x568 <KEYPAD_enuGetPressedKey+0x11e>
extern  u8 KEYPAD_au8ColsPORT[KEYPAD_u8_COLS_NUM];


KEYPAD_tenuErrorStatus KEYPAD_enuGetPressedKey(u8 *Add_u8KeyValue)
{
	KEYPAD_tenuErrorStatus Local_enuErrorStatus = KEYPAD_OK;
 566:	80 e0       	ldi	r24, 0x00	; 0
	         		}
	         }

    }
	return Local_enuErrorStatus;
}
 568:	27 96       	adiw	r28, 0x07	; 7
 56a:	0f b6       	in	r0, 0x3f	; 63
 56c:	f8 94       	cli
 56e:	de bf       	out	0x3e, r29	; 62
 570:	0f be       	out	0x3f, r0	; 63
 572:	cd bf       	out	0x3d, r28	; 61
 574:	df 91       	pop	r29
 576:	cf 91       	pop	r28
 578:	1f 91       	pop	r17
 57a:	0f 91       	pop	r16
 57c:	ff 90       	pop	r15
 57e:	ef 90       	pop	r14
 580:	df 90       	pop	r13
 582:	cf 90       	pop	r12
 584:	bf 90       	pop	r11
 586:	af 90       	pop	r10
 588:	9f 90       	pop	r9
 58a:	8f 90       	pop	r8
 58c:	7f 90       	pop	r7
 58e:	6f 90       	pop	r6
 590:	5f 90       	pop	r5
 592:	4f 90       	pop	r4
 594:	3f 90       	pop	r3
 596:	2f 90       	pop	r2
 598:	08 95       	ret

0000059a <LCD_vidSendEnable>:
//------------PRIVATE------------//


static void LCD_vidSendEnable(void)
{
	DIO_enuSetPinValue(LCD_u8_E_PORT,LCD_u8_E_PIN,DIO_u8_HIGH);
 59a:	80 e0       	ldi	r24, 0x00	; 0
 59c:	62 e0       	ldi	r22, 0x02	; 2
 59e:	41 e0       	ldi	r20, 0x01	; 1
 5a0:	0e 94 4e 05 	call	0xa9c	; 0xa9c <DIO_enuSetPinValue>
 5a4:	89 ef       	ldi	r24, 0xF9	; 249
 5a6:	90 e0       	ldi	r25, 0x00	; 0
 5a8:	01 97       	sbiw	r24, 0x01	; 1
 5aa:	f1 f7       	brne	.-4      	; 0x5a8 <LCD_vidSendEnable+0xe>
 5ac:	00 c0       	rjmp	.+0      	; 0x5ae <LCD_vidSendEnable+0x14>
 5ae:	00 00       	nop
	_delay_ms(1);
	DIO_enuSetPinValue(LCD_u8_E_PORT,LCD_u8_E_PIN,DIO_u8_LOW);
 5b0:	80 e0       	ldi	r24, 0x00	; 0
 5b2:	62 e0       	ldi	r22, 0x02	; 2
 5b4:	40 e0       	ldi	r20, 0x00	; 0
 5b6:	0e 94 4e 05 	call	0xa9c	; 0xa9c <DIO_enuSetPinValue>
}
 5ba:	08 95       	ret

000005bc <LCD_enuSendCharacter>:
 * Description: send ASCII CODE Character to LCD Microcontroller
 * Argument: Copy_u8Character   (The Desired Character to be Displayed)
 * Return: void
 * */
void LCD_enuSendCharacter(u8 Copy_u8Character)
{
 5bc:	cf 93       	push	r28
 5be:	c8 2f       	mov	r28, r24
#elif defined four_bit_mode


           // *************************** SENDING THE THE HIGH NIBBLE FIRST *******************************/////
       	    		  /* Rs pin ----> high */
       	    		  DIO_enuSetPinValue(LCD_u8_RS_PORT,LCD_u8_RS_PIN,DIO_u8_HIGH);
 5c0:	80 e0       	ldi	r24, 0x00	; 0
 5c2:	60 e0       	ldi	r22, 0x00	; 0
 5c4:	41 e0       	ldi	r20, 0x01	; 1
 5c6:	0e 94 4e 05 	call	0xa9c	; 0xa9c <DIO_enuSetPinValue>

       	    		  /* RW pin ----> low */
       	    		  DIO_enuSetPinValue(LCD_u8_RW_PORT, LCD_u8_RW_PIN, DIO_u8_LOW);
 5ca:	80 e0       	ldi	r24, 0x00	; 0
 5cc:	61 e0       	ldi	r22, 0x01	; 1
 5ce:	40 e0       	ldi	r20, 0x00	; 0
 5d0:	0e 94 4e 05 	call	0xa9c	; 0xa9c <DIO_enuSetPinValue>

                      // Send data //
       	    		  DIO_enuSetPinValue(LCD_u8_D4_PORT, LCD_u8_D4_PIN, (Copy_u8Character >> 4) & 1);
 5d4:	4c 2f       	mov	r20, r28
 5d6:	42 95       	swap	r20
 5d8:	4f 70       	andi	r20, 0x0F	; 15
 5da:	41 70       	andi	r20, 0x01	; 1
 5dc:	81 e0       	ldi	r24, 0x01	; 1
 5de:	64 e0       	ldi	r22, 0x04	; 4
 5e0:	0e 94 4e 05 	call	0xa9c	; 0xa9c <DIO_enuSetPinValue>
       	    		  DIO_enuSetPinValue(LCD_u8_D5_PORT, LCD_u8_D5_PIN, (Copy_u8Character >> 5) & 1);
 5e4:	4c 2f       	mov	r20, r28
 5e6:	42 95       	swap	r20
 5e8:	46 95       	lsr	r20
 5ea:	47 70       	andi	r20, 0x07	; 7
 5ec:	41 70       	andi	r20, 0x01	; 1
 5ee:	81 e0       	ldi	r24, 0x01	; 1
 5f0:	65 e0       	ldi	r22, 0x05	; 5
 5f2:	0e 94 4e 05 	call	0xa9c	; 0xa9c <DIO_enuSetPinValue>
       	    		  DIO_enuSetPinValue(LCD_u8_D6_PORT, LCD_u8_D6_PIN, (Copy_u8Character >> 6) & 1);
 5f6:	4c 2f       	mov	r20, r28
 5f8:	42 95       	swap	r20
 5fa:	46 95       	lsr	r20
 5fc:	46 95       	lsr	r20
 5fe:	43 70       	andi	r20, 0x03	; 3
 600:	41 70       	andi	r20, 0x01	; 1
 602:	81 e0       	ldi	r24, 0x01	; 1
 604:	66 e0       	ldi	r22, 0x06	; 6
 606:	0e 94 4e 05 	call	0xa9c	; 0xa9c <DIO_enuSetPinValue>
       	    		  DIO_enuSetPinValue(LCD_u8_D7_PORT, LCD_u8_D7_PIN, (Copy_u8Character >> 7) & 1);
 60a:	4c 2f       	mov	r20, r28
 60c:	44 1f       	adc	r20, r20
 60e:	44 27       	eor	r20, r20
 610:	44 1f       	adc	r20, r20
 612:	81 e0       	ldi	r24, 0x01	; 1
 614:	67 e0       	ldi	r22, 0x07	; 7
 616:	0e 94 4e 05 	call	0xa9c	; 0xa9c <DIO_enuSetPinValue>

       	    		  //     	 DIO_enuSetPortValue(DIO_u8_PORTC, Copy_u8Character);
       	    		  // Enable //
       	    		  LCD_vidSendEnable();
 61a:	0e 94 cd 02 	call	0x59a	; 0x59a <LCD_vidSendEnable>
						 
		 // *************************** SENDING THE THE lOW NIBBLE FIRST ********************************//////	 
						  	  /* Rs pin ----> high */
				       DIO_enuSetPinValue(LCD_u8_RS_PORT,LCD_u8_RS_PIN,DIO_u8_HIGH);
 61e:	80 e0       	ldi	r24, 0x00	; 0
 620:	60 e0       	ldi	r22, 0x00	; 0
 622:	41 e0       	ldi	r20, 0x01	; 1
 624:	0e 94 4e 05 	call	0xa9c	; 0xa9c <DIO_enuSetPinValue>
				       
				       /* RW pin ----> low */
				       DIO_enuSetPinValue(LCD_u8_RW_PORT, LCD_u8_RW_PIN, DIO_u8_LOW);
 628:	80 e0       	ldi	r24, 0x00	; 0
 62a:	61 e0       	ldi	r22, 0x01	; 1
 62c:	40 e0       	ldi	r20, 0x00	; 0
 62e:	0e 94 4e 05 	call	0xa9c	; 0xa9c <DIO_enuSetPinValue>
				       
				       // Send data //
				       DIO_enuSetPinValue(LCD_u8_D4_PORT, LCD_u8_D4_PIN, (Copy_u8Character >> 0) & 1);
 632:	4c 2f       	mov	r20, r28
 634:	41 70       	andi	r20, 0x01	; 1
 636:	81 e0       	ldi	r24, 0x01	; 1
 638:	64 e0       	ldi	r22, 0x04	; 4
 63a:	0e 94 4e 05 	call	0xa9c	; 0xa9c <DIO_enuSetPinValue>
				       DIO_enuSetPinValue(LCD_u8_D5_PORT, LCD_u8_D5_PIN, (Copy_u8Character >> 1) & 1);
 63e:	4c 2f       	mov	r20, r28
 640:	46 95       	lsr	r20
 642:	41 70       	andi	r20, 0x01	; 1
 644:	81 e0       	ldi	r24, 0x01	; 1
 646:	65 e0       	ldi	r22, 0x05	; 5
 648:	0e 94 4e 05 	call	0xa9c	; 0xa9c <DIO_enuSetPinValue>
				       DIO_enuSetPinValue(LCD_u8_D6_PORT, LCD_u8_D6_PIN, (Copy_u8Character >> 2) & 1);
 64c:	4c 2f       	mov	r20, r28
 64e:	46 95       	lsr	r20
 650:	46 95       	lsr	r20
 652:	41 70       	andi	r20, 0x01	; 1
 654:	81 e0       	ldi	r24, 0x01	; 1
 656:	66 e0       	ldi	r22, 0x06	; 6
 658:	0e 94 4e 05 	call	0xa9c	; 0xa9c <DIO_enuSetPinValue>
				       DIO_enuSetPinValue(LCD_u8_D7_PORT, LCD_u8_D7_PIN, (Copy_u8Character >> 3) & 1);
 65c:	c6 95       	lsr	r28
 65e:	c6 95       	lsr	r28
 660:	c6 95       	lsr	r28
 662:	4c 2f       	mov	r20, r28
 664:	41 70       	andi	r20, 0x01	; 1
 666:	81 e0       	ldi	r24, 0x01	; 1
 668:	67 e0       	ldi	r22, 0x07	; 7
 66a:	0e 94 4e 05 	call	0xa9c	; 0xa9c <DIO_enuSetPinValue>
				       
				       
				       //     	 DIO_enuSetPortValue(DIO_u8_PORTC, Copy_u8Character);
				       // Enable //
				         LCD_vidSendEnable();	
 66e:	0e 94 cd 02 	call	0x59a	; 0x59a <LCD_vidSendEnable>
 672:	87 eb       	ldi	r24, 0xB7	; 183
 674:	9b e0       	ldi	r25, 0x0B	; 11
 676:	01 97       	sbiw	r24, 0x01	; 1
 678:	f1 f7       	brne	.-4      	; 0x676 <LCD_enuSendCharacter+0xba>
 67a:	00 c0       	rjmp	.+0      	; 0x67c <LCD_enuSendCharacter+0xc0>
 67c:	00 00       	nop
						 _delay_ms(12);
						
	#endif					  
						 
}
 67e:	cf 91       	pop	r28
 680:	08 95       	ret

00000682 <LCD_enuSendInstruction>:
 * Description: send instruction to LCD Microcontroller
 * Argument: Copy_u8Instruction   (The Desired Instruction to be Executed)
 * Return: Error Status >>>>> LCD_OK , LCD_NOK
 * */
LCD_enutErrorStatus LCD_enuSendInstruction(u8 Copy_u8Instruction)
{
 682:	cf 93       	push	r28
 684:	c8 2f       	mov	r28, r24
			  _delay_ms(4);
		#elif defined four_bit_mode	  
		
 // *************************** SENDING THE THE HIGH NIBBLE FIRST ********************************//////	 
			  /* Rs pin ----> low */
			  DIO_enuSetPinValue(LCD_u8_RS_PORT,LCD_u8_RS_PIN,DIO_u8_LOW);
 686:	80 e0       	ldi	r24, 0x00	; 0
 688:	60 e0       	ldi	r22, 0x00	; 0
 68a:	40 e0       	ldi	r20, 0x00	; 0
 68c:	0e 94 4e 05 	call	0xa9c	; 0xa9c <DIO_enuSetPinValue>

			  /* RW pin ----> low */
			  DIO_enuSetPinValue(LCD_u8_RW_PORT, LCD_u8_RW_PIN, DIO_u8_LOW);
 690:	80 e0       	ldi	r24, 0x00	; 0
 692:	61 e0       	ldi	r22, 0x01	; 1
 694:	40 e0       	ldi	r20, 0x00	; 0
 696:	0e 94 4e 05 	call	0xa9c	; 0xa9c <DIO_enuSetPinValue>

			  DIO_enuSetPinValue(LCD_u8_D4_PORT, LCD_u8_D4_PIN, (Copy_u8Instruction >> 4) & 1);
 69a:	4c 2f       	mov	r20, r28
 69c:	42 95       	swap	r20
 69e:	4f 70       	andi	r20, 0x0F	; 15
 6a0:	41 70       	andi	r20, 0x01	; 1
 6a2:	81 e0       	ldi	r24, 0x01	; 1
 6a4:	64 e0       	ldi	r22, 0x04	; 4
 6a6:	0e 94 4e 05 	call	0xa9c	; 0xa9c <DIO_enuSetPinValue>
			  DIO_enuSetPinValue(LCD_u8_D5_PORT, LCD_u8_D5_PIN, (Copy_u8Instruction >> 5) & 1);
 6aa:	4c 2f       	mov	r20, r28
 6ac:	42 95       	swap	r20
 6ae:	46 95       	lsr	r20
 6b0:	47 70       	andi	r20, 0x07	; 7
 6b2:	41 70       	andi	r20, 0x01	; 1
 6b4:	81 e0       	ldi	r24, 0x01	; 1
 6b6:	65 e0       	ldi	r22, 0x05	; 5
 6b8:	0e 94 4e 05 	call	0xa9c	; 0xa9c <DIO_enuSetPinValue>
			  DIO_enuSetPinValue(LCD_u8_D6_PORT, LCD_u8_D6_PIN, (Copy_u8Instruction >> 6) & 1);
 6bc:	4c 2f       	mov	r20, r28
 6be:	42 95       	swap	r20
 6c0:	46 95       	lsr	r20
 6c2:	46 95       	lsr	r20
 6c4:	43 70       	andi	r20, 0x03	; 3
 6c6:	41 70       	andi	r20, 0x01	; 1
 6c8:	81 e0       	ldi	r24, 0x01	; 1
 6ca:	66 e0       	ldi	r22, 0x06	; 6
 6cc:	0e 94 4e 05 	call	0xa9c	; 0xa9c <DIO_enuSetPinValue>
			  DIO_enuSetPinValue(LCD_u8_D7_PORT, LCD_u8_D7_PIN, (Copy_u8Instruction >> 7) & 1);
 6d0:	4c 2f       	mov	r20, r28
 6d2:	44 1f       	adc	r20, r20
 6d4:	44 27       	eor	r20, r20
 6d6:	44 1f       	adc	r20, r20
 6d8:	81 e0       	ldi	r24, 0x01	; 1
 6da:	67 e0       	ldi	r22, 0x07	; 7
 6dc:	0e 94 4e 05 	call	0xa9c	; 0xa9c <DIO_enuSetPinValue>

			  // Enable //
			  LCD_vidSendEnable();
 6e0:	0e 94 cd 02 	call	0x59a	; 0x59a <LCD_vidSendEnable>
			  
    // *************************** SENDING THE THE lOW NIBBLE FIRST ********************************//////	 
			  	  /* Rs pin ----> low */
			  	  DIO_enuSetPinValue(LCD_u8_RS_PORT,LCD_u8_RS_PIN,DIO_u8_LOW);
 6e4:	80 e0       	ldi	r24, 0x00	; 0
 6e6:	60 e0       	ldi	r22, 0x00	; 0
 6e8:	40 e0       	ldi	r20, 0x00	; 0
 6ea:	0e 94 4e 05 	call	0xa9c	; 0xa9c <DIO_enuSetPinValue>

			  	  /* RW pin ----> low */
			  	  DIO_enuSetPinValue(LCD_u8_RW_PORT, LCD_u8_RW_PIN, DIO_u8_LOW);
 6ee:	80 e0       	ldi	r24, 0x00	; 0
 6f0:	61 e0       	ldi	r22, 0x01	; 1
 6f2:	40 e0       	ldi	r20, 0x00	; 0
 6f4:	0e 94 4e 05 	call	0xa9c	; 0xa9c <DIO_enuSetPinValue>

			  	  // Send instructions //
			  	  DIO_enuSetPinValue(LCD_u8_D4_PORT, LCD_u8_D4_PIN, (Copy_u8Instruction >> 0) & 1);
 6f8:	4c 2f       	mov	r20, r28
 6fa:	41 70       	andi	r20, 0x01	; 1
 6fc:	81 e0       	ldi	r24, 0x01	; 1
 6fe:	64 e0       	ldi	r22, 0x04	; 4
 700:	0e 94 4e 05 	call	0xa9c	; 0xa9c <DIO_enuSetPinValue>
			  	  DIO_enuSetPinValue(LCD_u8_D5_PORT, LCD_u8_D5_PIN, (Copy_u8Instruction >> 1) & 1);
 704:	4c 2f       	mov	r20, r28
 706:	46 95       	lsr	r20
 708:	41 70       	andi	r20, 0x01	; 1
 70a:	81 e0       	ldi	r24, 0x01	; 1
 70c:	65 e0       	ldi	r22, 0x05	; 5
 70e:	0e 94 4e 05 	call	0xa9c	; 0xa9c <DIO_enuSetPinValue>
			  	  DIO_enuSetPinValue(LCD_u8_D6_PORT, LCD_u8_D6_PIN, (Copy_u8Instruction >> 2) & 1);
 712:	4c 2f       	mov	r20, r28
 714:	46 95       	lsr	r20
 716:	46 95       	lsr	r20
 718:	41 70       	andi	r20, 0x01	; 1
 71a:	81 e0       	ldi	r24, 0x01	; 1
 71c:	66 e0       	ldi	r22, 0x06	; 6
 71e:	0e 94 4e 05 	call	0xa9c	; 0xa9c <DIO_enuSetPinValue>
			  	  DIO_enuSetPinValue(LCD_u8_D7_PORT, LCD_u8_D7_PIN, (Copy_u8Instruction >> 3) & 1);
 722:	c6 95       	lsr	r28
 724:	c6 95       	lsr	r28
 726:	c6 95       	lsr	r28
 728:	4c 2f       	mov	r20, r28
 72a:	41 70       	andi	r20, 0x01	; 1
 72c:	81 e0       	ldi	r24, 0x01	; 1
 72e:	67 e0       	ldi	r22, 0x07	; 7
 730:	0e 94 4e 05 	call	0xa9c	; 0xa9c <DIO_enuSetPinValue>

			  	  // Enable //
			  	  LCD_vidSendEnable();
 734:	0e 94 cd 02 	call	0x59a	; 0x59a <LCD_vidSendEnable>
 738:	87 eb       	ldi	r24, 0xB7	; 183
 73a:	9b e0       	ldi	r25, 0x0B	; 11
 73c:	01 97       	sbiw	r24, 0x01	; 1
 73e:	f1 f7       	brne	.-4      	; 0x73c <LCD_enuSendInstruction+0xba>
 740:	00 c0       	rjmp	.+0      	; 0x742 <LCD_enuSendInstruction+0xc0>
 742:	00 00       	nop
				 _delay_ms(12);
	  }

#endif
     return Local_enuErrorStatus;
}
 744:	80 e0       	ldi	r24, 0x00	; 0
 746:	cf 91       	pop	r28
 748:	08 95       	ret

0000074a <LCD_VidInit>:
 74a:	8f e3       	ldi	r24, 0x3F	; 63
 74c:	9f e1       	ldi	r25, 0x1F	; 31
 74e:	01 97       	sbiw	r24, 0x01	; 1
 750:	f1 f7       	brne	.-4      	; 0x74e <LCD_VidInit+0x4>
 752:	00 c0       	rjmp	.+0      	; 0x754 <LCD_VidInit+0xa>
 754:	00 00       	nop
 
 #elif defined four_bit_mode 
 	_delay_ms(32);


   LCD_enuSendInstruction(0x02);
 756:	82 e0       	ldi	r24, 0x02	; 2
 758:	0e 94 41 03 	call	0x682	; 0x682 <LCD_enuSendInstruction>

 	/* function set */
 	LCD_enuSendInstruction(LCD_u8_FUNCTION_SET);
 75c:	88 e2       	ldi	r24, 0x28	; 40
 75e:	0e 94 41 03 	call	0x682	; 0x682 <LCD_enuSendInstruction>
 762:	89 ef       	ldi	r24, 0xF9	; 249
 764:	90 e0       	ldi	r25, 0x00	; 0
 766:	01 97       	sbiw	r24, 0x01	; 1
 768:	f1 f7       	brne	.-4      	; 0x766 <LCD_VidInit+0x1c>
 76a:	00 c0       	rjmp	.+0      	; 0x76c <LCD_VidInit+0x22>
 76c:	00 00       	nop

 	_delay_ms(1);
 	/* display control */
 	LCD_enuSendInstruction(LCD_u8_DISPLAY_ON_CURSOR_OFF);
 76e:	8c e0       	ldi	r24, 0x0C	; 12
 770:	0e 94 41 03 	call	0x682	; 0x682 <LCD_enuSendInstruction>
 774:	89 ef       	ldi	r24, 0xF9	; 249
 776:	90 e0       	ldi	r25, 0x00	; 0
 778:	01 97       	sbiw	r24, 0x01	; 1
 77a:	f1 f7       	brne	.-4      	; 0x778 <LCD_VidInit+0x2e>
 77c:	00 c0       	rjmp	.+0      	; 0x77e <LCD_VidInit+0x34>
 77e:	00 00       	nop

 	_delay_ms(1);
 	/* display control */
 	LCD_enuSendInstruction(LCD_u8_CLEAR_DISPLAY);
 780:	81 e0       	ldi	r24, 0x01	; 1
 782:	0e 94 41 03 	call	0x682	; 0x682 <LCD_enuSendInstruction>
 786:	83 ef       	ldi	r24, 0xF3	; 243
 788:	91 e0       	ldi	r25, 0x01	; 1
 78a:	01 97       	sbiw	r24, 0x01	; 1
 78c:	f1 f7       	brne	.-4      	; 0x78a <LCD_VidInit+0x40>
 78e:	00 c0       	rjmp	.+0      	; 0x790 <LCD_VidInit+0x46>
 790:	00 00       	nop
 //	LCD_enuSendInstruction(LCD_u8_RETURN_HOME);

 	_delay_ms(2);
	 
 	/* entry mode */
 	LCD_enuSendInstruction(LCD_u8_CURSOR_INC_SHIFT_OFF);
 792:	86 e0       	ldi	r24, 0x06	; 6
 794:	0e 94 41 03 	call	0x682	; 0x682 <LCD_enuSendInstruction>
 798:	85 ed       	ldi	r24, 0xD5	; 213
 79a:	96 e0       	ldi	r25, 0x06	; 6
 79c:	01 97       	sbiw	r24, 0x01	; 1
 79e:	f1 f7       	brne	.-4      	; 0x79c <LCD_VidInit+0x52>
 7a0:	00 c0       	rjmp	.+0      	; 0x7a2 <LCD_VidInit+0x58>
 7a2:	00 00       	nop
 	_delay_ms(7);

 #endif
}
 7a4:	08 95       	ret

000007a6 <LCD_enuGoTo>:

LCD_enutErrorStatus LCD_enuGoTo(u8 Copy_u8Row , u8 Copy_u8Col)
{
	LCD_enutErrorStatus  Local_enuErrorStatus = LCD_OK;

	 if(Copy_u8Row >LCD_u8_ROW1 ||  Copy_u8Col>LCD_u8_COL15)
 7a6:	82 30       	cpi	r24, 0x02	; 2
 7a8:	98 f4       	brcc	.+38     	; 0x7d0 <LCD_enuGoTo+0x2a>
 7aa:	60 31       	cpi	r22, 0x10	; 16
 7ac:	98 f4       	brcc	.+38     	; 0x7d4 <LCD_enuGoTo+0x2e>
	 {
		 Local_enuErrorStatus = LCD_NOK;
	 }
	 else
	 {
		 switch (Copy_u8Row)
 7ae:	88 23       	and	r24, r24
 7b0:	19 f0       	breq	.+6      	; 0x7b8 <LCD_enuGoTo+0x12>
 7b2:	81 30       	cpi	r24, 0x01	; 1
 7b4:	89 f4       	brne	.+34     	; 0x7d8 <LCD_enuGoTo+0x32>
 7b6:	06 c0       	rjmp	.+12     	; 0x7c4 <LCD_enuGoTo+0x1e>
		 {
		     case LCD_u8_ROW0:
		    	                  LCD_enuSendInstruction(LCD_u8_FIRST_DDRAM_ADDRESS + Copy_u8Col);
 7b8:	86 2f       	mov	r24, r22
 7ba:	80 58       	subi	r24, 0x80	; 128
 7bc:	0e 94 41 03 	call	0x682	; 0x682 <LCD_enuSendInstruction>



LCD_enutErrorStatus LCD_enuGoTo(u8 Copy_u8Row , u8 Copy_u8Col)
{
	LCD_enutErrorStatus  Local_enuErrorStatus = LCD_OK;
 7c0:	80 e0       	ldi	r24, 0x00	; 0
	 {
		 switch (Copy_u8Row)
		 {
		     case LCD_u8_ROW0:
		    	                  LCD_enuSendInstruction(LCD_u8_FIRST_DDRAM_ADDRESS + Copy_u8Col);
		    	                    break;
 7c2:	08 95       	ret
		     case LCD_u8_ROW1:
		    	                  LCD_enuSendInstruction(LCD_u8_FIRST_DDRAM_ADDRESS + (Copy_u8Col+0x40));
 7c4:	86 2f       	mov	r24, r22
 7c6:	80 54       	subi	r24, 0x40	; 64
 7c8:	0e 94 41 03 	call	0x682	; 0x682 <LCD_enuSendInstruction>



LCD_enutErrorStatus LCD_enuGoTo(u8 Copy_u8Row , u8 Copy_u8Col)
{
	LCD_enutErrorStatus  Local_enuErrorStatus = LCD_OK;
 7cc:	80 e0       	ldi	r24, 0x00	; 0
		     case LCD_u8_ROW0:
		    	                  LCD_enuSendInstruction(LCD_u8_FIRST_DDRAM_ADDRESS + Copy_u8Col);
		    	                    break;
		     case LCD_u8_ROW1:
		    	                  LCD_enuSendInstruction(LCD_u8_FIRST_DDRAM_ADDRESS + (Copy_u8Col+0x40));
		    	                    break;
 7ce:	08 95       	ret
{
	LCD_enutErrorStatus  Local_enuErrorStatus = LCD_OK;

	 if(Copy_u8Row >LCD_u8_ROW1 ||  Copy_u8Col>LCD_u8_COL15)
	 {
		 Local_enuErrorStatus = LCD_NOK;
 7d0:	81 e0       	ldi	r24, 0x01	; 1
 7d2:	08 95       	ret
 7d4:	81 e0       	ldi	r24, 0x01	; 1
 7d6:	08 95       	ret



LCD_enutErrorStatus LCD_enuGoTo(u8 Copy_u8Row , u8 Copy_u8Col)
{
	LCD_enutErrorStatus  Local_enuErrorStatus = LCD_OK;
 7d8:	80 e0       	ldi	r24, 0x00	; 0
		    	                    break;
		 }

	 }
    return Local_enuErrorStatus;
}
 7da:	08 95       	ret

000007dc <LCD_enuSendString>:


LCD_enutErrorStatus	LCD_enuSendString(u8* Add_pu8String)
{
 7dc:	cf 93       	push	r28
 7de:	df 93       	push	r29
 7e0:	ec 01       	movw	r28, r24
	LCD_enutErrorStatus Local_enuErrorStatus = LCD_OK;

		if(Add_pu8String == NULL)
 7e2:	00 97       	sbiw	r24, 0x00	; 0
 7e4:	51 f0       	breq	.+20     	; 0x7fa <LCD_enuSendString+0x1e>
		{
			Local_enuErrorStatus = LCD_NOK;
		}
		else
		{
                  while(*Add_pu8String!='\0')
 7e6:	88 81       	ld	r24, Y
 7e8:	88 23       	and	r24, r24
 7ea:	49 f0       	breq	.+18     	; 0x7fe <LCD_enuSendString+0x22>
	 }
    return Local_enuErrorStatus;
}


LCD_enutErrorStatus	LCD_enuSendString(u8* Add_pu8String)
 7ec:	21 96       	adiw	r28, 0x01	; 1
		}
		else
		{
                  while(*Add_pu8String!='\0')
                     {
                	  LCD_enuSendCharacter(*Add_pu8String);
 7ee:	0e 94 de 02 	call	0x5bc	; 0x5bc <LCD_enuSendCharacter>
		{
			Local_enuErrorStatus = LCD_NOK;
		}
		else
		{
                  while(*Add_pu8String!='\0')
 7f2:	89 91       	ld	r24, Y+
 7f4:	88 23       	and	r24, r24
 7f6:	d9 f7       	brne	.-10     	; 0x7ee <LCD_enuSendString+0x12>
 7f8:	03 c0       	rjmp	.+6      	; 0x800 <LCD_enuSendString+0x24>
{
	LCD_enutErrorStatus Local_enuErrorStatus = LCD_OK;

		if(Add_pu8String == NULL)
		{
			Local_enuErrorStatus = LCD_NOK;
 7fa:	81 e0       	ldi	r24, 0x01	; 1
 7fc:	01 c0       	rjmp	.+2      	; 0x800 <LCD_enuSendString+0x24>
}


LCD_enutErrorStatus	LCD_enuSendString(u8* Add_pu8String)
{
	LCD_enutErrorStatus Local_enuErrorStatus = LCD_OK;
 7fe:	80 e0       	ldi	r24, 0x00	; 0
                	  LCD_enuSendCharacter(*Add_pu8String);
                    	   Add_pu8String++;
                    }
		}
		return Local_enuErrorStatus;
}
 800:	df 91       	pop	r29
 802:	cf 91       	pop	r28
 804:	08 95       	ret

00000806 <LCD_enuSendCustomCharacter>:


LCD_enutErrorStatus LCD_enuSendCustomCharacter(u8 *Add_u8Pattern,u8 Copy_u8NumOfBlock , u8 Copy_u8Row , u8 Copy_u8Col)
{
 806:	df 92       	push	r13
 808:	ef 92       	push	r14
 80a:	ff 92       	push	r15
 80c:	0f 93       	push	r16
 80e:	1f 93       	push	r17
 810:	cf 93       	push	r28
 812:	df 93       	push	r29
 814:	ec 01       	movw	r28, r24
 816:	f6 2e       	mov	r15, r22
 818:	e4 2e       	mov	r14, r20
 81a:	d2 2e       	mov	r13, r18
	LCD_enutErrorStatus Local_enuErrorStatus = LCD_OK;
     u8 Local_u8Iterator=8;
	if(Add_u8Pattern == NULL || Copy_u8NumOfBlock > 7 || Copy_u8Row > LCD_u8_ROW1 || Copy_u8Col > LCD_u8_COL15)
 81c:	00 97       	sbiw	r24, 0x00	; 0
 81e:	41 f1       	breq	.+80     	; 0x870 <__stack+0x11>
 820:	87 e0       	ldi	r24, 0x07	; 7
 822:	86 17       	cp	r24, r22
 824:	38 f1       	brcs	.+78     	; 0x874 <__stack+0x15>
 826:	91 e0       	ldi	r25, 0x01	; 1
 828:	94 17       	cp	r25, r20
 82a:	30 f1       	brcs	.+76     	; 0x878 <__stack+0x19>
 82c:	8f e0       	ldi	r24, 0x0F	; 15
 82e:	82 17       	cp	r24, r18
 830:	28 f1       	brcs	.+74     	; 0x87c <__stack+0x1d>
		Local_enuErrorStatus=LCD_NOK;
	}

	else
	{
	      LCD_enuSendInstruction(LCD_u8_FIRST_CGRAM_ADDRESS + (Copy_u8NumOfBlock*8)); // the block is 8 byte so we jumb a block not a byte
 832:	86 2f       	mov	r24, r22
 834:	88 0f       	add	r24, r24
 836:	88 0f       	add	r24, r24
 838:	88 0f       	add	r24, r24
 83a:	80 5c       	subi	r24, 0xC0	; 192
 83c:	0e 94 41 03 	call	0x682	; 0x682 <LCD_enuSendInstruction>
		}
		return Local_enuErrorStatus;
}


LCD_enutErrorStatus LCD_enuSendCustomCharacter(u8 *Add_u8Pattern,u8 Copy_u8NumOfBlock , u8 Copy_u8Row , u8 Copy_u8Col)
 840:	8e 01       	movw	r16, r28
 842:	08 5f       	subi	r16, 0xF8	; 248
 844:	1f 4f       	sbci	r17, 0xFF	; 255
	else
	{
	      LCD_enuSendInstruction(LCD_u8_FIRST_CGRAM_ADDRESS + (Copy_u8NumOfBlock*8)); // the block is 8 byte so we jumb a block not a byte
	    while(Local_u8Iterator--)
		  {
	    	LCD_enuSendCharacter (*Add_u8Pattern);
 846:	89 91       	ld	r24, Y+
 848:	0e 94 de 02 	call	0x5bc	; 0x5bc <LCD_enuSendCharacter>
 84c:	81 ee       	ldi	r24, 0xE1	; 225
 84e:	94 e0       	ldi	r25, 0x04	; 4
 850:	01 97       	sbiw	r24, 0x01	; 1
 852:	f1 f7       	brne	.-4      	; 0x850 <LCD_enuSendCustomCharacter+0x4a>
 854:	00 c0       	rjmp	.+0      	; 0x856 <LCD_enuSendCustomCharacter+0x50>
 856:	00 00       	nop
	}

	else
	{
	      LCD_enuSendInstruction(LCD_u8_FIRST_CGRAM_ADDRESS + (Copy_u8NumOfBlock*8)); // the block is 8 byte so we jumb a block not a byte
	    while(Local_u8Iterator--)
 858:	c0 17       	cp	r28, r16
 85a:	d1 07       	cpc	r29, r17
 85c:	a1 f7       	brne	.-24     	; 0x846 <LCD_enuSendCustomCharacter+0x40>
	    	LCD_enuSendCharacter (*Add_u8Pattern);
		    Add_u8Pattern++;
		    _delay_ms(5);
	      }

	    LCD_enuGoTo(Copy_u8Row,Copy_u8Col);
 85e:	8e 2d       	mov	r24, r14
 860:	6d 2d       	mov	r22, r13
 862:	0e 94 d3 03 	call	0x7a6	; 0x7a6 <LCD_enuGoTo>
	    LCD_enuSendCharacter(Copy_u8NumOfBlock);
 866:	8f 2d       	mov	r24, r15
 868:	0e 94 de 02 	call	0x5bc	; 0x5bc <LCD_enuSendCharacter>
}


LCD_enutErrorStatus LCD_enuSendCustomCharacter(u8 *Add_u8Pattern,u8 Copy_u8NumOfBlock , u8 Copy_u8Row , u8 Copy_u8Col)
{
	LCD_enutErrorStatus Local_enuErrorStatus = LCD_OK;
 86c:	80 e0       	ldi	r24, 0x00	; 0
 86e:	07 c0       	rjmp	.+14     	; 0x87e <__stack+0x1f>
     u8 Local_u8Iterator=8;
	if(Add_u8Pattern == NULL || Copy_u8NumOfBlock > 7 || Copy_u8Row > LCD_u8_ROW1 || Copy_u8Col > LCD_u8_COL15)
	{
		Local_enuErrorStatus=LCD_NOK;
 870:	81 e0       	ldi	r24, 0x01	; 1
 872:	05 c0       	rjmp	.+10     	; 0x87e <__stack+0x1f>
 874:	81 e0       	ldi	r24, 0x01	; 1
 876:	03 c0       	rjmp	.+6      	; 0x87e <__stack+0x1f>
 878:	81 e0       	ldi	r24, 0x01	; 1
 87a:	01 c0       	rjmp	.+2      	; 0x87e <__stack+0x1f>
 87c:	81 e0       	ldi	r24, 0x01	; 1
	    LCD_enuGoTo(Copy_u8Row,Copy_u8Col);
	    LCD_enuSendCharacter(Copy_u8NumOfBlock);
	}

	return Local_enuErrorStatus;
}
 87e:	df 91       	pop	r29
 880:	cf 91       	pop	r28
 882:	1f 91       	pop	r17
 884:	0f 91       	pop	r16
 886:	ff 90       	pop	r15
 888:	ef 90       	pop	r14
 88a:	df 90       	pop	r13
 88c:	08 95       	ret

0000088e <LCD_enuSendNumber>:




void LCD_enuSendNumber(u32 Copy_u32Number)
{
 88e:	8f 92       	push	r8
 890:	9f 92       	push	r9
 892:	af 92       	push	r10
 894:	bf 92       	push	r11
 896:	ff 92       	push	r15
 898:	0f 93       	push	r16
 89a:	1f 93       	push	r17
 89c:	cf 93       	push	r28
 89e:	df 93       	push	r29
 8a0:	cd b7       	in	r28, 0x3d	; 61
 8a2:	de b7       	in	r29, 0x3e	; 62
 8a4:	2f 97       	sbiw	r28, 0x0f	; 15
 8a6:	0f b6       	in	r0, 0x3f	; 63
 8a8:	f8 94       	cli
 8aa:	de bf       	out	0x3e, r29	; 62
 8ac:	0f be       	out	0x3f, r0	; 63
 8ae:	cd bf       	out	0x3d, r28	; 61
 8b0:	8b 01       	movw	r16, r22
 8b2:	9c 01       	movw	r18, r24

    u8 Local_u8Reminder=0;
    u8 LCD_au8Reminder[15];
    u8 Local_u8Index=0;
	s8 Local_s8Iterator;
	if(Copy_u32Number == 0)
 8b4:	61 15       	cp	r22, r1
 8b6:	71 05       	cpc	r23, r1
 8b8:	81 05       	cpc	r24, r1
 8ba:	91 05       	cpc	r25, r1
 8bc:	21 f4       	brne	.+8      	; 0x8c6 <LCD_enuSendNumber+0x38>
	{
		LCD_enuSendCharacter('0');
 8be:	80 e3       	ldi	r24, 0x30	; 48
 8c0:	0e 94 de 02 	call	0x5bc	; 0x5bc <LCD_enuSendCharacter>
 8c4:	33 c0       	rjmp	.+102    	; 0x92c <LCD_enuSendNumber+0x9e>

    u8 Local_u8Reminder=0;
    u8 LCD_au8Reminder[15];
    u8 Local_u8Index=0;
	s8 Local_s8Iterator;
	if(Copy_u32Number == 0)
 8c6:	ff 24       	eor	r15, r15
	}
	else
	{
          while(Copy_u32Number!=0)
          {
	          Local_u8Reminder=Copy_u32Number%10;   //    1
 8c8:	0f 2e       	mov	r0, r31
 8ca:	fa e0       	ldi	r31, 0x0A	; 10
 8cc:	8f 2e       	mov	r8, r31
 8ce:	f0 e0       	ldi	r31, 0x00	; 0
 8d0:	9f 2e       	mov	r9, r31
 8d2:	f0 e0       	ldi	r31, 0x00	; 0
 8d4:	af 2e       	mov	r10, r31
 8d6:	f0 e0       	ldi	r31, 0x00	; 0
 8d8:	bf 2e       	mov	r11, r31
 8da:	f0 2d       	mov	r31, r0
	          Copy_u32Number=Copy_u32Number/10;   //1
 8dc:	c9 01       	movw	r24, r18
 8de:	b8 01       	movw	r22, r16
 8e0:	a5 01       	movw	r20, r10
 8e2:	94 01       	movw	r18, r8
 8e4:	0e 94 fb 06 	call	0xdf6	; 0xdf6 <__udivmodsi4>
 8e8:	89 01       	movw	r16, r18
 8ea:	9a 01       	movw	r18, r20
	          LCD_au8Reminder[Local_u8Index]=Local_u8Reminder;
 8ec:	e1 e0       	ldi	r30, 0x01	; 1
 8ee:	f0 e0       	ldi	r31, 0x00	; 0
 8f0:	ec 0f       	add	r30, r28
 8f2:	fd 1f       	adc	r31, r29
 8f4:	ef 0d       	add	r30, r15
 8f6:	f1 1d       	adc	r31, r1
 8f8:	60 83       	st	Z, r22
	          Local_u8Index++;
 8fa:	f3 94       	inc	r15
	{
		LCD_enuSendCharacter('0');
	}
	else
	{
          while(Copy_u32Number!=0)
 8fc:	01 15       	cp	r16, r1
 8fe:	11 05       	cpc	r17, r1
 900:	21 05       	cpc	r18, r1
 902:	31 05       	cpc	r19, r1
 904:	59 f7       	brne	.-42     	; 0x8dc <LCD_enuSendNumber+0x4e>
	          Copy_u32Number=Copy_u32Number/10;   //1
	          LCD_au8Reminder[Local_u8Index]=Local_u8Reminder;
	          Local_u8Index++;
          }
          
          for (Local_s8Iterator=Local_u8Index-1 ; Local_s8Iterator>=0; --Local_s8Iterator)
 906:	1f 2d       	mov	r17, r15
 908:	11 50       	subi	r17, 0x01	; 1
 90a:	82 f0       	brmi	.+32     	; 0x92c <LCD_enuSendNumber+0x9e>
                 LCD_enuSendCharacter(LCD_au8Reminder[Local_s8Iterator]+48);
 90c:	e1 2f       	mov	r30, r17
 90e:	ff 27       	eor	r31, r31
 910:	e7 fd       	sbrc	r30, 7
 912:	f0 95       	com	r31
 914:	81 e0       	ldi	r24, 0x01	; 1
 916:	90 e0       	ldi	r25, 0x00	; 0
 918:	8c 0f       	add	r24, r28
 91a:	9d 1f       	adc	r25, r29
 91c:	e8 0f       	add	r30, r24
 91e:	f9 1f       	adc	r31, r25
 920:	80 81       	ld	r24, Z
 922:	80 5d       	subi	r24, 0xD0	; 208
 924:	0e 94 de 02 	call	0x5bc	; 0x5bc <LCD_enuSendCharacter>
	          Copy_u32Number=Copy_u32Number/10;   //1
	          LCD_au8Reminder[Local_u8Index]=Local_u8Reminder;
	          Local_u8Index++;
          }
          
          for (Local_s8Iterator=Local_u8Index-1 ; Local_s8Iterator>=0; --Local_s8Iterator)
 928:	11 50       	subi	r17, 0x01	; 1
 92a:	82 f7       	brpl	.-32     	; 0x90c <LCD_enuSendNumber+0x7e>
                 LCD_enuSendCharacter(LCD_au8Reminder[Local_s8Iterator]+48);
	}		  

}
 92c:	2f 96       	adiw	r28, 0x0f	; 15
 92e:	0f b6       	in	r0, 0x3f	; 63
 930:	f8 94       	cli
 932:	de bf       	out	0x3e, r29	; 62
 934:	0f be       	out	0x3f, r0	; 63
 936:	cd bf       	out	0x3d, r28	; 61
 938:	df 91       	pop	r29
 93a:	cf 91       	pop	r28
 93c:	1f 91       	pop	r17
 93e:	0f 91       	pop	r16
 940:	ff 90       	pop	r15
 942:	bf 90       	pop	r11
 944:	af 90       	pop	r10
 946:	9f 90       	pop	r9
 948:	8f 90       	pop	r8
 94a:	08 95       	ret

0000094c <LCD_vidPrintMyName>:


void LCD_vidPrintMyName()
{
 94c:	df 92       	push	r13
 94e:	ef 92       	push	r14
 950:	ff 92       	push	r15
 952:	0f 93       	push	r16
 954:	1f 93       	push	r17
 956:	cf 93       	push	r28
 958:	df 93       	push	r29
		 u8 Local_u8Col=0;
		 u8 Local_u8LastRow=0;
		 u8 Local_u8LastCol =0;
		 u8 Local_u8Flag=0;

         LCD_enuSendCharacter('S');
 95a:	83 e5       	ldi	r24, 0x53	; 83
 95c:	0e 94 de 02 	call	0x5bc	; 0x5bc <LCD_enuSendCharacter>
		 LCD_enuGoTo(1,1);
 960:	81 e0       	ldi	r24, 0x01	; 1
 962:	61 e0       	ldi	r22, 0x01	; 1
 964:	0e 94 d3 03 	call	0x7a6	; 0x7a6 <LCD_enuGoTo>
		 LCD_enuSendCharacter('E');
 968:	85 e4       	ldi	r24, 0x45	; 69
 96a:	0e 94 de 02 	call	0x5bc	; 0x5bc <LCD_enuSendCharacter>
		 LCD_enuGoTo(0,2);
 96e:	80 e0       	ldi	r24, 0x00	; 0
 970:	62 e0       	ldi	r22, 0x02	; 2
 972:	0e 94 d3 03 	call	0x7a6	; 0x7a6 <LCD_enuGoTo>
		 LCD_enuSendCharacter('I');
 976:	89 e4       	ldi	r24, 0x49	; 73
 978:	0e 94 de 02 	call	0x5bc	; 0x5bc <LCD_enuSendCharacter>
		 LCD_enuGoTo(1,3);
 97c:	81 e0       	ldi	r24, 0x01	; 1
 97e:	63 e0       	ldi	r22, 0x03	; 3
 980:	0e 94 d3 03 	call	0x7a6	; 0x7a6 <LCD_enuGoTo>
		 LCD_enuSendCharacter('F');
 984:	86 e4       	ldi	r24, 0x46	; 70
 986:	0e 94 de 02 	call	0x5bc	; 0x5bc <LCD_enuSendCharacter>
 98a:	8f e4       	ldi	r24, 0x4F	; 79
 98c:	93 ec       	ldi	r25, 0xC3	; 195
 98e:	01 97       	sbiw	r24, 0x01	; 1
 990:	f1 f7       	brne	.-4      	; 0x98e <LCD_vidPrintMyName+0x42>
 992:	00 c0       	rjmp	.+0      	; 0x994 <LCD_vidPrintMyName+0x48>
 994:	00 00       	nop
	     _delay_ms(200);
	     LCD_enuSendInstruction(LCD_u8_SHIFT_CURSOR_LEFT);
 996:	80 e1       	ldi	r24, 0x10	; 16
 998:	0e 94 41 03 	call	0x682	; 0x682 <LCD_enuSendInstruction>
{
	u8 Local_u8Row=0;
		 u8 Local_u8Col=0;
		 u8 Local_u8LastRow=0;
		 u8 Local_u8LastCol =0;
		 u8 Local_u8Flag=0;
 99c:	dd 24       	eor	r13, r13
		 LCD_enuSendCharacter('I');
		 LCD_enuGoTo(1,3);
		 LCD_enuSendCharacter('F');
	     _delay_ms(200);
	     LCD_enuSendInstruction(LCD_u8_SHIFT_CURSOR_LEFT);
	     Local_u8Col=4;
 99e:	c4 e0       	ldi	r28, 0x04	; 4
	    Local_u8Row=0;
 9a0:	d0 e0       	ldi	r29, 0x00	; 0
			{
				LCD_enuGoTo(Local_u8Row,Local_u8Col);
				Local_u8Flag=1;
			}                   // 0 ,4
			else
			{     Local_u8Row=Local_u8Row^1;
 9a2:	ee 24       	eor	r14, r14
 9a4:	e3 94       	inc	r14
	    Local_u8Row=0;

while (Local_u8Col<19)
	   {

		     LCD_enuSendCharacter(0);
 9a6:	80 e0       	ldi	r24, 0x00	; 0
 9a8:	0e 94 de 02 	call	0x5bc	; 0x5bc <LCD_enuSendCharacter>

			if(Local_u8Flag==0)
 9ac:	dd 20       	and	r13, r13
 9ae:	31 f4       	brne	.+12     	; 0x9bc <LCD_vidPrintMyName+0x70>
			{
				LCD_enuGoTo(Local_u8Row,Local_u8Col);
 9b0:	8d 2f       	mov	r24, r29
 9b2:	6c 2f       	mov	r22, r28
 9b4:	0e 94 d3 03 	call	0x7a6	; 0x7a6 <LCD_enuGoTo>
				Local_u8Flag=1;
 9b8:	de 2c       	mov	r13, r14
 9ba:	06 c0       	rjmp	.+12     	; 0x9c8 <LCD_vidPrintMyName+0x7c>
			}                   // 0 ,4
			else
			{     Local_u8Row=Local_u8Row^1;
 9bc:	de 25       	eor	r29, r14
			Local_u8Col++;
 9be:	cf 5f       	subi	r28, 0xFF	; 255
				LCD_enuGoTo(Local_u8Row,Local_u8Col);
 9c0:	8d 2f       	mov	r24, r29
 9c2:	6c 2f       	mov	r22, r28
 9c4:	0e 94 d3 03 	call	0x7a6	; 0x7a6 <LCD_enuGoTo>
			}
			Local_u8LastRow=Local_u8Row;
			Local_u8LastCol=Local_u8Col;
			 LCD_enuSendCharacter('F');
 9c8:	86 e4       	ldi	r24, 0x46	; 70
 9ca:	0e 94 de 02 	call	0x5bc	; 0x5bc <LCD_enuSendCharacter>
 9ce:	87 ea       	ldi	r24, 0xA7	; 167
 9d0:	91 e6       	ldi	r25, 0x61	; 97
 9d2:	01 97       	sbiw	r24, 0x01	; 1
 9d4:	f1 f7       	brne	.-4      	; 0x9d2 <LCD_vidPrintMyName+0x86>
 9d6:	00 c0       	rjmp	.+0      	; 0x9d8 <LCD_vidPrintMyName+0x8c>
 9d8:	00 00       	nop
			  _delay_ms(100);

			  Local_u8Col-=2;
 9da:	0f 2e       	mov	r0, r31
 9dc:	fe ef       	ldi	r31, 0xFE	; 254
 9de:	ff 2e       	mov	r15, r31
 9e0:	f0 2d       	mov	r31, r0
 9e2:	fc 0e       	add	r15, r28
		     LCD_enuGoTo(Local_u8Row,Local_u8Col);  // 0,2
 9e4:	8d 2f       	mov	r24, r29
 9e6:	6f 2d       	mov	r22, r15
 9e8:	0e 94 d3 03 	call	0x7a6	; 0x7a6 <LCD_enuGoTo>
		     LCD_enuSendCharacter(0);
 9ec:	80 e0       	ldi	r24, 0x00	; 0
 9ee:	0e 94 de 02 	call	0x5bc	; 0x5bc <LCD_enuSendCharacter>
		     Local_u8Row=Local_u8Row^1;
 9f2:	1d 2f       	mov	r17, r29
 9f4:	1e 25       	eor	r17, r14
		     Local_u8Col++;
 9f6:	6c 2f       	mov	r22, r28
 9f8:	61 50       	subi	r22, 0x01	; 1
		     LCD_enuGoTo(Local_u8Row,Local_u8Col); //1,3
 9fa:	81 2f       	mov	r24, r17
 9fc:	0e 94 d3 03 	call	0x7a6	; 0x7a6 <LCD_enuGoTo>
		     LCD_enuSendCharacter('I');
 a00:	89 e4       	ldi	r24, 0x49	; 73
 a02:	0e 94 de 02 	call	0x5bc	; 0x5bc <LCD_enuSendCharacter>
 a06:	87 ea       	ldi	r24, 0xA7	; 167
 a08:	91 e6       	ldi	r25, 0x61	; 97
 a0a:	01 97       	sbiw	r24, 0x01	; 1
 a0c:	f1 f7       	brne	.-4      	; 0xa0a <LCD_vidPrintMyName+0xbe>
 a0e:	00 c0       	rjmp	.+0      	; 0xa10 <LCD_vidPrintMyName+0xc4>
 a10:	00 00       	nop
		     _delay_ms(100);

		     Local_u8Col-=2;
 a12:	0c 2f       	mov	r16, r28
 a14:	03 50       	subi	r16, 0x03	; 3
		     LCD_enuGoTo(Local_u8Row,Local_u8Col); // 1 1
 a16:	81 2f       	mov	r24, r17
 a18:	60 2f       	mov	r22, r16
 a1a:	0e 94 d3 03 	call	0x7a6	; 0x7a6 <LCD_enuGoTo>
		     LCD_enuSendCharacter(0);
 a1e:	80 e0       	ldi	r24, 0x00	; 0
 a20:	0e 94 de 02 	call	0x5bc	; 0x5bc <LCD_enuSendCharacter>
		     Local_u8Row=Local_u8Row^1;
		     Local_u8Col++;
		     LCD_enuGoTo(Local_u8Row,Local_u8Col); // 0 2
 a24:	8d 2f       	mov	r24, r29
 a26:	6f 2d       	mov	r22, r15
 a28:	0e 94 d3 03 	call	0x7a6	; 0x7a6 <LCD_enuGoTo>
		     LCD_enuSendCharacter('E');
 a2c:	85 e4       	ldi	r24, 0x45	; 69
 a2e:	0e 94 de 02 	call	0x5bc	; 0x5bc <LCD_enuSendCharacter>
 a32:	87 ea       	ldi	r24, 0xA7	; 167
 a34:	91 e6       	ldi	r25, 0x61	; 97
 a36:	01 97       	sbiw	r24, 0x01	; 1
 a38:	f1 f7       	brne	.-4      	; 0xa36 <LCD_vidPrintMyName+0xea>
 a3a:	00 c0       	rjmp	.+0      	; 0xa3c <LCD_vidPrintMyName+0xf0>
 a3c:	00 00       	nop
		     _delay_ms(100);

		     Local_u8Col-=2;
 a3e:	6c 2f       	mov	r22, r28
 a40:	64 50       	subi	r22, 0x04	; 4
		     LCD_enuGoTo(Local_u8Row,Local_u8Col); // 0 0
 a42:	8d 2f       	mov	r24, r29
 a44:	0e 94 d3 03 	call	0x7a6	; 0x7a6 <LCD_enuGoTo>
		     LCD_enuSendCharacter(0);
 a48:	80 e0       	ldi	r24, 0x00	; 0
 a4a:	0e 94 de 02 	call	0x5bc	; 0x5bc <LCD_enuSendCharacter>
		     Local_u8Row=Local_u8Row^1;
		     Local_u8Col++;
		     LCD_enuGoTo(Local_u8Row,Local_u8Col); // 1 1
 a4e:	81 2f       	mov	r24, r17
 a50:	60 2f       	mov	r22, r16
 a52:	0e 94 d3 03 	call	0x7a6	; 0x7a6 <LCD_enuGoTo>
		     LCD_enuSendCharacter('S');
 a56:	83 e5       	ldi	r24, 0x53	; 83
 a58:	0e 94 de 02 	call	0x5bc	; 0x5bc <LCD_enuSendCharacter>
 a5c:	87 ea       	ldi	r24, 0xA7	; 167
 a5e:	91 e6       	ldi	r25, 0x61	; 97
 a60:	01 97       	sbiw	r24, 0x01	; 1
 a62:	f1 f7       	brne	.-4      	; 0xa60 <LCD_vidPrintMyName+0x114>
 a64:	00 c0       	rjmp	.+0      	; 0xa66 <LCD_vidPrintMyName+0x11a>
 a66:	00 00       	nop
	     _delay_ms(200);
	     LCD_enuSendInstruction(LCD_u8_SHIFT_CURSOR_LEFT);
	     Local_u8Col=4;
	    Local_u8Row=0;

while (Local_u8Col<19)
 a68:	c3 31       	cpi	r28, 0x13	; 19
 a6a:	08 f4       	brcc	.+2      	; 0xa6e <LCD_vidPrintMyName+0x122>
 a6c:	9c cf       	rjmp	.-200    	; 0x9a6 <LCD_vidPrintMyName+0x5a>
		     LCD_enuSendCharacter('S');
		     _delay_ms(100);
		     Local_u8Col=Local_u8LastCol;
		     Local_u8Row=Local_u8LastRow;
	 }
}
 a6e:	df 91       	pop	r29
 a70:	cf 91       	pop	r28
 a72:	1f 91       	pop	r17
 a74:	0f 91       	pop	r16
 a76:	ff 90       	pop	r15
 a78:	ef 90       	pop	r14
 a7a:	df 90       	pop	r13
 a7c:	08 95       	ret

00000a7e <PORT_vidInit>:

#include "../../MCAL/DIO/DIO_int.h"

void PORT_vidInit()
{
	DIO_vidInit();
 a7e:	0e 94 42 05 	call	0xa84	; 0xa84 <DIO_vidInit>
 a82:	08 95       	ret

00000a84 <DIO_vidInit>:
       #define DIO_u8_OUTPUT_HIGH            1
       #define DIO_u8_INPUT_FLOATING         0
       #define DIO_u8_INPUT_PULLUP           0

      /* Set DDR Values */
	DIO_u8_DDRA_REG = CONC(DIO_u8_PORTA_PIN7, DIO_u8_PORTA_PIN6, DIO_u8_PORTA_PIN5
 a84:	8f ef       	ldi	r24, 0xFF	; 255
 a86:	8a bb       	out	0x1a, r24	; 26
								, DIO_u8_PORTA_PIN4 , DIO_u8_PORTA_PIN3, DIO_u8_PORTA_PIN2
								, DIO_u8_PORTA_PIN1, DIO_u8_PORTA_PIN0);   /* 0b00001111   */

		DIO_u8_DDRB_REG = CONC(DIO_u8_PORTB_PIN7, DIO_u8_PORTB_PIN6, DIO_u8_PORTB_PIN5
 a88:	87 bb       	out	0x17, r24	; 23
								, DIO_u8_PORTB_PIN4 , DIO_u8_PORTB_PIN3, DIO_u8_PORTB_PIN2
								, DIO_u8_PORTB_PIN1, DIO_u8_PORTB_PIN0);

		DIO_u8_DDRC_REG = CONC(DIO_u8_PORTC_PIN7, DIO_u8_PORTC_PIN6, DIO_u8_PORTC_PIN5
 a8a:	84 bb       	out	0x14, r24	; 20
								, DIO_u8_PORTC_PIN4 , DIO_u8_PORTC_PIN3, DIO_u8_PORTC_PIN2
								, DIO_u8_PORTC_PIN1, DIO_u8_PORTC_PIN0);

		DIO_u8_DDRD_REG = CONC(DIO_u8_PORTD_PIN7, DIO_u8_PORTD_PIN6, DIO_u8_PORTD_PIN5
 a8c:	90 ef       	ldi	r25, 0xF0	; 240
 a8e:	91 bb       	out	0x11, r25	; 17
    #define DIO_u8_INPUT_FLOATING         0
    #define DIO_u8_INPUT_PULLUP           1


	/* set Port values */
		DIO_u8_PORTA_REG = CONC(DIO_u8_PORTA_PIN7, DIO_u8_PORTA_PIN6, DIO_u8_PORTA_PIN5
 a90:	1b ba       	out	0x1b, r1	; 27
									, DIO_u8_PORTA_PIN4 , DIO_u8_PORTA_PIN3, DIO_u8_PORTA_PIN2
									, DIO_u8_PORTA_PIN1, DIO_u8_PORTA_PIN0);   /* 0b11110001   */

			DIO_u8_PORTB_REG = CONC(DIO_u8_PORTB_PIN7, DIO_u8_PORTB_PIN6, DIO_u8_PORTB_PIN5
 a92:	18 ba       	out	0x18, r1	; 24
									, DIO_u8_PORTB_PIN4 , DIO_u8_PORTB_PIN3, DIO_u8_PORTB_PIN2
									, DIO_u8_PORTB_PIN1, DIO_u8_PORTB_PIN0);

			DIO_u8_PORTC_REG = CONC(DIO_u8_PORTC_PIN7, DIO_u8_PORTC_PIN6, DIO_u8_PORTC_PIN5
 a94:	85 bb       	out	0x15, r24	; 21
									, DIO_u8_PORTC_PIN4 , DIO_u8_PORTC_PIN3, DIO_u8_PORTC_PIN2
									, DIO_u8_PORTC_PIN1, DIO_u8_PORTC_PIN0);

			DIO_u8_PORTD_REG = CONC(DIO_u8_PORTD_PIN7, DIO_u8_PORTD_PIN6, DIO_u8_PORTD_PIN5
 a96:	8f e0       	ldi	r24, 0x0F	; 15
 a98:	82 bb       	out	0x12, r24	; 18

  #define DIO_u8_OUTPUT_LOW             0
  #define DIO_u8_OUTPUT_HIGH            1
  #define DIO_u8_INPUT_FLOATING         2
  #define DIO_u8_INPUT_PULLUP           3
}
 a9a:	08 95       	ret

00000a9c <DIO_enuSetPinValue>:
 * */
DIO_tenuErrorStatus DIO_enuSetPinValue(u8 Copy_u8Port, u8 Copy_u8Pin, u8 Copy_u8Value)
{
	DIO_tenuErrorStatus Local_enuErrorStatus = DIO_OK;
	//check error status //
	if(Copy_u8Port > DIO_u8_PORTD || Copy_u8Pin > DIO_u8_PIN7 || Copy_u8Value> DIO_u8_HIGH)
 a9c:	84 30       	cpi	r24, 0x04	; 4
 a9e:	08 f0       	brcs	.+2      	; 0xaa2 <DIO_enuSetPinValue+0x6>
 aa0:	8b c0       	rjmp	.+278    	; 0xbb8 <DIO_enuSetPinValue+0x11c>
 aa2:	68 30       	cpi	r22, 0x08	; 8
 aa4:	08 f0       	brcs	.+2      	; 0xaa8 <DIO_enuSetPinValue+0xc>
 aa6:	8a c0       	rjmp	.+276    	; 0xbbc <DIO_enuSetPinValue+0x120>
 aa8:	42 30       	cpi	r20, 0x02	; 2
 aaa:	08 f0       	brcs	.+2      	; 0xaae <DIO_enuSetPinValue+0x12>
 aac:	89 c0       	rjmp	.+274    	; 0xbc0 <DIO_enuSetPinValue+0x124>
		Local_enuErrorStatus= DIO_NOK;
	else
	{
		switch (Copy_u8Port)
 aae:	81 30       	cpi	r24, 0x01	; 1
 ab0:	41 f1       	breq	.+80     	; 0xb02 <DIO_enuSetPinValue+0x66>
 ab2:	81 30       	cpi	r24, 0x01	; 1
 ab4:	38 f0       	brcs	.+14     	; 0xac4 <DIO_enuSetPinValue+0x28>
 ab6:	82 30       	cpi	r24, 0x02	; 2
 ab8:	09 f4       	brne	.+2      	; 0xabc <DIO_enuSetPinValue+0x20>
 aba:	41 c0       	rjmp	.+130    	; 0xb3e <DIO_enuSetPinValue+0xa2>
 abc:	83 30       	cpi	r24, 0x03	; 3
 abe:	09 f0       	breq	.+2      	; 0xac2 <DIO_enuSetPinValue+0x26>
 ac0:	81 c0       	rjmp	.+258    	; 0xbc4 <DIO_enuSetPinValue+0x128>
 ac2:	5b c0       	rjmp	.+182    	; 0xb7a <DIO_enuSetPinValue+0xde>
		{
            case DIO_u8_PORTA:
            		(Copy_u8Value == DIO_u8_HIGH)? (DIO_u8_PORTA_REG |= (1<<Copy_u8Pin)) : (DIO_u8_PORTA_REG &= ~(1<<Copy_u8Pin));
 ac4:	41 30       	cpi	r20, 0x01	; 1
 ac6:	71 f4       	brne	.+28     	; 0xae4 <DIO_enuSetPinValue+0x48>
 ac8:	2b b3       	in	r18, 0x1b	; 27
 aca:	81 e0       	ldi	r24, 0x01	; 1
 acc:	90 e0       	ldi	r25, 0x00	; 0
 ace:	ac 01       	movw	r20, r24
 ad0:	02 c0       	rjmp	.+4      	; 0xad6 <DIO_enuSetPinValue+0x3a>
 ad2:	44 0f       	add	r20, r20
 ad4:	55 1f       	adc	r21, r21
 ad6:	6a 95       	dec	r22
 ad8:	e2 f7       	brpl	.-8      	; 0xad2 <DIO_enuSetPinValue+0x36>
 ada:	ba 01       	movw	r22, r20
 adc:	62 2b       	or	r22, r18
 ade:	6b bb       	out	0x1b, r22	; 27
 *
 *  Return: Error Status : DIO_OK , DIO_NOK
 * */
DIO_tenuErrorStatus DIO_enuSetPinValue(u8 Copy_u8Port, u8 Copy_u8Pin, u8 Copy_u8Value)
{
	DIO_tenuErrorStatus Local_enuErrorStatus = DIO_OK;
 ae0:	80 e0       	ldi	r24, 0x00	; 0
 ae2:	08 95       	ret
	else
	{
		switch (Copy_u8Port)
		{
            case DIO_u8_PORTA:
            		(Copy_u8Value == DIO_u8_HIGH)? (DIO_u8_PORTA_REG |= (1<<Copy_u8Pin)) : (DIO_u8_PORTA_REG &= ~(1<<Copy_u8Pin));
 ae4:	2b b3       	in	r18, 0x1b	; 27
 ae6:	81 e0       	ldi	r24, 0x01	; 1
 ae8:	90 e0       	ldi	r25, 0x00	; 0
 aea:	ac 01       	movw	r20, r24
 aec:	02 c0       	rjmp	.+4      	; 0xaf2 <DIO_enuSetPinValue+0x56>
 aee:	44 0f       	add	r20, r20
 af0:	55 1f       	adc	r21, r21
 af2:	6a 95       	dec	r22
 af4:	e2 f7       	brpl	.-8      	; 0xaee <DIO_enuSetPinValue+0x52>
 af6:	ba 01       	movw	r22, r20
 af8:	60 95       	com	r22
 afa:	62 23       	and	r22, r18
 afc:	6b bb       	out	0x1b, r22	; 27
 *
 *  Return: Error Status : DIO_OK , DIO_NOK
 * */
DIO_tenuErrorStatus DIO_enuSetPinValue(u8 Copy_u8Port, u8 Copy_u8Pin, u8 Copy_u8Value)
{
	DIO_tenuErrorStatus Local_enuErrorStatus = DIO_OK;
 afe:	80 e0       	ldi	r24, 0x00	; 0
 b00:	08 95       	ret
            case DIO_u8_PORTA:
            		(Copy_u8Value == DIO_u8_HIGH)? (DIO_u8_PORTA_REG |= (1<<Copy_u8Pin)) : (DIO_u8_PORTA_REG &= ~(1<<Copy_u8Pin));
            		break;

            case DIO_u8_PORTB:
           				(Copy_u8Value == DIO_u8_HIGH)? (DIO_u8_PORTB_REG |= (1<<Copy_u8Pin)) : (DIO_u8_PORTB_REG &= ~(1<<Copy_u8Pin));
 b02:	41 30       	cpi	r20, 0x01	; 1
 b04:	69 f4       	brne	.+26     	; 0xb20 <DIO_enuSetPinValue+0x84>
 b06:	48 b3       	in	r20, 0x18	; 24
 b08:	21 e0       	ldi	r18, 0x01	; 1
 b0a:	30 e0       	ldi	r19, 0x00	; 0
 b0c:	c9 01       	movw	r24, r18
 b0e:	02 c0       	rjmp	.+4      	; 0xb14 <DIO_enuSetPinValue+0x78>
 b10:	88 0f       	add	r24, r24
 b12:	99 1f       	adc	r25, r25
 b14:	6a 95       	dec	r22
 b16:	e2 f7       	brpl	.-8      	; 0xb10 <DIO_enuSetPinValue+0x74>
 b18:	84 2b       	or	r24, r20
 b1a:	88 bb       	out	0x18, r24	; 24
 *
 *  Return: Error Status : DIO_OK , DIO_NOK
 * */
DIO_tenuErrorStatus DIO_enuSetPinValue(u8 Copy_u8Port, u8 Copy_u8Pin, u8 Copy_u8Value)
{
	DIO_tenuErrorStatus Local_enuErrorStatus = DIO_OK;
 b1c:	80 e0       	ldi	r24, 0x00	; 0
 b1e:	08 95       	ret
            case DIO_u8_PORTA:
            		(Copy_u8Value == DIO_u8_HIGH)? (DIO_u8_PORTA_REG |= (1<<Copy_u8Pin)) : (DIO_u8_PORTA_REG &= ~(1<<Copy_u8Pin));
            		break;

            case DIO_u8_PORTB:
           				(Copy_u8Value == DIO_u8_HIGH)? (DIO_u8_PORTB_REG |= (1<<Copy_u8Pin)) : (DIO_u8_PORTB_REG &= ~(1<<Copy_u8Pin));
 b20:	28 b3       	in	r18, 0x18	; 24
 b22:	81 e0       	ldi	r24, 0x01	; 1
 b24:	90 e0       	ldi	r25, 0x00	; 0
 b26:	ac 01       	movw	r20, r24
 b28:	02 c0       	rjmp	.+4      	; 0xb2e <DIO_enuSetPinValue+0x92>
 b2a:	44 0f       	add	r20, r20
 b2c:	55 1f       	adc	r21, r21
 b2e:	6a 95       	dec	r22
 b30:	e2 f7       	brpl	.-8      	; 0xb2a <DIO_enuSetPinValue+0x8e>
 b32:	ba 01       	movw	r22, r20
 b34:	60 95       	com	r22
 b36:	62 23       	and	r22, r18
 b38:	68 bb       	out	0x18, r22	; 24
 *
 *  Return: Error Status : DIO_OK , DIO_NOK
 * */
DIO_tenuErrorStatus DIO_enuSetPinValue(u8 Copy_u8Port, u8 Copy_u8Pin, u8 Copy_u8Value)
{
	DIO_tenuErrorStatus Local_enuErrorStatus = DIO_OK;
 b3a:	80 e0       	ldi	r24, 0x00	; 0
 b3c:	08 95       	ret
            case DIO_u8_PORTB:
           				(Copy_u8Value == DIO_u8_HIGH)? (DIO_u8_PORTB_REG |= (1<<Copy_u8Pin)) : (DIO_u8_PORTB_REG &= ~(1<<Copy_u8Pin));
           				break;

            case DIO_u8_PORTC:
           				(Copy_u8Value == DIO_u8_HIGH)? (DIO_u8_PORTC_REG |= (1<<Copy_u8Pin)) : (DIO_u8_PORTC_REG &= ~(1<<Copy_u8Pin));
 b3e:	41 30       	cpi	r20, 0x01	; 1
 b40:	69 f4       	brne	.+26     	; 0xb5c <DIO_enuSetPinValue+0xc0>
 b42:	45 b3       	in	r20, 0x15	; 21
 b44:	21 e0       	ldi	r18, 0x01	; 1
 b46:	30 e0       	ldi	r19, 0x00	; 0
 b48:	c9 01       	movw	r24, r18
 b4a:	02 c0       	rjmp	.+4      	; 0xb50 <DIO_enuSetPinValue+0xb4>
 b4c:	88 0f       	add	r24, r24
 b4e:	99 1f       	adc	r25, r25
 b50:	6a 95       	dec	r22
 b52:	e2 f7       	brpl	.-8      	; 0xb4c <DIO_enuSetPinValue+0xb0>
 b54:	84 2b       	or	r24, r20
 b56:	85 bb       	out	0x15, r24	; 21
 *
 *  Return: Error Status : DIO_OK , DIO_NOK
 * */
DIO_tenuErrorStatus DIO_enuSetPinValue(u8 Copy_u8Port, u8 Copy_u8Pin, u8 Copy_u8Value)
{
	DIO_tenuErrorStatus Local_enuErrorStatus = DIO_OK;
 b58:	80 e0       	ldi	r24, 0x00	; 0
 b5a:	08 95       	ret
            case DIO_u8_PORTB:
           				(Copy_u8Value == DIO_u8_HIGH)? (DIO_u8_PORTB_REG |= (1<<Copy_u8Pin)) : (DIO_u8_PORTB_REG &= ~(1<<Copy_u8Pin));
           				break;

            case DIO_u8_PORTC:
           				(Copy_u8Value == DIO_u8_HIGH)? (DIO_u8_PORTC_REG |= (1<<Copy_u8Pin)) : (DIO_u8_PORTC_REG &= ~(1<<Copy_u8Pin));
 b5c:	25 b3       	in	r18, 0x15	; 21
 b5e:	81 e0       	ldi	r24, 0x01	; 1
 b60:	90 e0       	ldi	r25, 0x00	; 0
 b62:	ac 01       	movw	r20, r24
 b64:	02 c0       	rjmp	.+4      	; 0xb6a <DIO_enuSetPinValue+0xce>
 b66:	44 0f       	add	r20, r20
 b68:	55 1f       	adc	r21, r21
 b6a:	6a 95       	dec	r22
 b6c:	e2 f7       	brpl	.-8      	; 0xb66 <DIO_enuSetPinValue+0xca>
 b6e:	ba 01       	movw	r22, r20
 b70:	60 95       	com	r22
 b72:	62 23       	and	r22, r18
 b74:	65 bb       	out	0x15, r22	; 21
 *
 *  Return: Error Status : DIO_OK , DIO_NOK
 * */
DIO_tenuErrorStatus DIO_enuSetPinValue(u8 Copy_u8Port, u8 Copy_u8Pin, u8 Copy_u8Value)
{
	DIO_tenuErrorStatus Local_enuErrorStatus = DIO_OK;
 b76:	80 e0       	ldi	r24, 0x00	; 0
 b78:	08 95       	ret
            case DIO_u8_PORTC:
           				(Copy_u8Value == DIO_u8_HIGH)? (DIO_u8_PORTC_REG |= (1<<Copy_u8Pin)) : (DIO_u8_PORTC_REG &= ~(1<<Copy_u8Pin));
           				break;

            case DIO_u8_PORTD:
           				(Copy_u8Value == DIO_u8_HIGH)? (DIO_u8_PORTD_REG |= (1<<Copy_u8Pin)) : (DIO_u8_PORTD_REG &= ~(1<<Copy_u8Pin));
 b7a:	41 30       	cpi	r20, 0x01	; 1
 b7c:	71 f4       	brne	.+28     	; 0xb9a <DIO_enuSetPinValue+0xfe>
 b7e:	22 b3       	in	r18, 0x12	; 18
 b80:	81 e0       	ldi	r24, 0x01	; 1
 b82:	90 e0       	ldi	r25, 0x00	; 0
 b84:	ac 01       	movw	r20, r24
 b86:	02 c0       	rjmp	.+4      	; 0xb8c <DIO_enuSetPinValue+0xf0>
 b88:	44 0f       	add	r20, r20
 b8a:	55 1f       	adc	r21, r21
 b8c:	6a 95       	dec	r22
 b8e:	e2 f7       	brpl	.-8      	; 0xb88 <DIO_enuSetPinValue+0xec>
 b90:	ba 01       	movw	r22, r20
 b92:	62 2b       	or	r22, r18
 b94:	62 bb       	out	0x12, r22	; 18
 *
 *  Return: Error Status : DIO_OK , DIO_NOK
 * */
DIO_tenuErrorStatus DIO_enuSetPinValue(u8 Copy_u8Port, u8 Copy_u8Pin, u8 Copy_u8Value)
{
	DIO_tenuErrorStatus Local_enuErrorStatus = DIO_OK;
 b96:	80 e0       	ldi	r24, 0x00	; 0
 b98:	08 95       	ret
            case DIO_u8_PORTC:
           				(Copy_u8Value == DIO_u8_HIGH)? (DIO_u8_PORTC_REG |= (1<<Copy_u8Pin)) : (DIO_u8_PORTC_REG &= ~(1<<Copy_u8Pin));
           				break;

            case DIO_u8_PORTD:
           				(Copy_u8Value == DIO_u8_HIGH)? (DIO_u8_PORTD_REG |= (1<<Copy_u8Pin)) : (DIO_u8_PORTD_REG &= ~(1<<Copy_u8Pin));
 b9a:	22 b3       	in	r18, 0x12	; 18
 b9c:	81 e0       	ldi	r24, 0x01	; 1
 b9e:	90 e0       	ldi	r25, 0x00	; 0
 ba0:	ac 01       	movw	r20, r24
 ba2:	02 c0       	rjmp	.+4      	; 0xba8 <DIO_enuSetPinValue+0x10c>
 ba4:	44 0f       	add	r20, r20
 ba6:	55 1f       	adc	r21, r21
 ba8:	6a 95       	dec	r22
 baa:	e2 f7       	brpl	.-8      	; 0xba4 <DIO_enuSetPinValue+0x108>
 bac:	ba 01       	movw	r22, r20
 bae:	60 95       	com	r22
 bb0:	62 23       	and	r22, r18
 bb2:	62 bb       	out	0x12, r22	; 18
 *
 *  Return: Error Status : DIO_OK , DIO_NOK
 * */
DIO_tenuErrorStatus DIO_enuSetPinValue(u8 Copy_u8Port, u8 Copy_u8Pin, u8 Copy_u8Value)
{
	DIO_tenuErrorStatus Local_enuErrorStatus = DIO_OK;
 bb4:	80 e0       	ldi	r24, 0x00	; 0
 bb6:	08 95       	ret
	//check error status //
	if(Copy_u8Port > DIO_u8_PORTD || Copy_u8Pin > DIO_u8_PIN7 || Copy_u8Value> DIO_u8_HIGH)
		Local_enuErrorStatus= DIO_NOK;
 bb8:	81 e0       	ldi	r24, 0x01	; 1
 bba:	08 95       	ret
 bbc:	81 e0       	ldi	r24, 0x01	; 1
 bbe:	08 95       	ret
 bc0:	81 e0       	ldi	r24, 0x01	; 1
 bc2:	08 95       	ret
 *
 *  Return: Error Status : DIO_OK , DIO_NOK
 * */
DIO_tenuErrorStatus DIO_enuSetPinValue(u8 Copy_u8Port, u8 Copy_u8Pin, u8 Copy_u8Value)
{
	DIO_tenuErrorStatus Local_enuErrorStatus = DIO_OK;
 bc4:	80 e0       	ldi	r24, 0x00	; 0
           				break;
		}
	}
	return Local_enuErrorStatus;

}
 bc6:	08 95       	ret

00000bc8 <DIO_enuGetPinValue>:
DIO_tenuErrorStatus DIO_enuGetPinValue(u8 Copy_u8Port, u8 Copy_u8Pin, u8 *Add_pu8PinValue)
{
	DIO_tenuErrorStatus Local_enuErrorStatus = DIO_OK;

	// Error Checks  //
   if((Copy_u8Port>DIO_u8_PORTD) || (Copy_u8Pin > DIO_u8_PIN7) || (Add_pu8PinValue == NULL))
 bc8:	84 30       	cpi	r24, 0x04	; 4
 bca:	08 f0       	brcs	.+2      	; 0xbce <DIO_enuGetPinValue+0x6>
 bcc:	49 c0       	rjmp	.+146    	; 0xc60 <DIO_enuGetPinValue+0x98>
 bce:	68 30       	cpi	r22, 0x08	; 8
 bd0:	08 f0       	brcs	.+2      	; 0xbd4 <DIO_enuGetPinValue+0xc>
 bd2:	48 c0       	rjmp	.+144    	; 0xc64 <DIO_enuGetPinValue+0x9c>
 bd4:	41 15       	cp	r20, r1
 bd6:	51 05       	cpc	r21, r1
 bd8:	09 f4       	brne	.+2      	; 0xbdc <DIO_enuGetPinValue+0x14>
 bda:	46 c0       	rjmp	.+140    	; 0xc68 <DIO_enuGetPinValue+0xa0>
	   Local_enuErrorStatus = DIO_NOK;
   else
   {
	     switch (Copy_u8Port)
 bdc:	81 30       	cpi	r24, 0x01	; 1
 bde:	b1 f0       	breq	.+44     	; 0xc0c <DIO_enuGetPinValue+0x44>
 be0:	81 30       	cpi	r24, 0x01	; 1
 be2:	30 f0       	brcs	.+12     	; 0xbf0 <DIO_enuGetPinValue+0x28>
 be4:	82 30       	cpi	r24, 0x02	; 2
 be6:	01 f1       	breq	.+64     	; 0xc28 <DIO_enuGetPinValue+0x60>
 be8:	83 30       	cpi	r24, 0x03	; 3
 bea:	09 f0       	breq	.+2      	; 0xbee <DIO_enuGetPinValue+0x26>
 bec:	3f c0       	rjmp	.+126    	; 0xc6c <DIO_enuGetPinValue+0xa4>
 bee:	2a c0       	rjmp	.+84     	; 0xc44 <DIO_enuGetPinValue+0x7c>
	   		  {
	               case DIO_u8_PORTA:
	            	   *Add_pu8PinValue= ((DIO_u8_PINA_REG >> Copy_u8Pin) & 1);
 bf0:	89 b3       	in	r24, 0x19	; 25
 bf2:	90 e0       	ldi	r25, 0x00	; 0
 bf4:	9c 01       	movw	r18, r24
 bf6:	02 c0       	rjmp	.+4      	; 0xbfc <DIO_enuGetPinValue+0x34>
 bf8:	35 95       	asr	r19
 bfa:	27 95       	ror	r18
 bfc:	6a 95       	dec	r22
 bfe:	e2 f7       	brpl	.-8      	; 0xbf8 <DIO_enuGetPinValue+0x30>
 c00:	b9 01       	movw	r22, r18
 c02:	61 70       	andi	r22, 0x01	; 1
 c04:	fa 01       	movw	r30, r20
 c06:	60 83       	st	Z, r22
 *
 *  Return: Error Status : DIO_OK , DIO_NOK
 * */
DIO_tenuErrorStatus DIO_enuGetPinValue(u8 Copy_u8Port, u8 Copy_u8Pin, u8 *Add_pu8PinValue)
{
	DIO_tenuErrorStatus Local_enuErrorStatus = DIO_OK;
 c08:	80 e0       	ldi	r24, 0x00	; 0
   {
	     switch (Copy_u8Port)
	   		  {
	               case DIO_u8_PORTA:
	            	   *Add_pu8PinValue= ((DIO_u8_PINA_REG >> Copy_u8Pin) & 1);
	               		break;
 c0a:	08 95       	ret

	               case DIO_u8_PORTB:
	            	   *Add_pu8PinValue= ((DIO_u8_PINB_REG>>Copy_u8Pin)& 1) ;
 c0c:	86 b3       	in	r24, 0x16	; 22
 c0e:	90 e0       	ldi	r25, 0x00	; 0
 c10:	9c 01       	movw	r18, r24
 c12:	02 c0       	rjmp	.+4      	; 0xc18 <DIO_enuGetPinValue+0x50>
 c14:	35 95       	asr	r19
 c16:	27 95       	ror	r18
 c18:	6a 95       	dec	r22
 c1a:	e2 f7       	brpl	.-8      	; 0xc14 <DIO_enuGetPinValue+0x4c>
 c1c:	b9 01       	movw	r22, r18
 c1e:	61 70       	andi	r22, 0x01	; 1
 c20:	fa 01       	movw	r30, r20
 c22:	60 83       	st	Z, r22
 *
 *  Return: Error Status : DIO_OK , DIO_NOK
 * */
DIO_tenuErrorStatus DIO_enuGetPinValue(u8 Copy_u8Port, u8 Copy_u8Pin, u8 *Add_pu8PinValue)
{
	DIO_tenuErrorStatus Local_enuErrorStatus = DIO_OK;
 c24:	80 e0       	ldi	r24, 0x00	; 0
	            	   *Add_pu8PinValue= ((DIO_u8_PINA_REG >> Copy_u8Pin) & 1);
	               		break;

	               case DIO_u8_PORTB:
	            	   *Add_pu8PinValue= ((DIO_u8_PINB_REG>>Copy_u8Pin)& 1) ;
	            	   break;
 c26:	08 95       	ret

	               case DIO_u8_PORTC:
	            	   *Add_pu8PinValue= ((DIO_u8_PINC_REG>>Copy_u8Pin)& 1) ;
 c28:	83 b3       	in	r24, 0x13	; 19
 c2a:	90 e0       	ldi	r25, 0x00	; 0
 c2c:	9c 01       	movw	r18, r24
 c2e:	02 c0       	rjmp	.+4      	; 0xc34 <DIO_enuGetPinValue+0x6c>
 c30:	35 95       	asr	r19
 c32:	27 95       	ror	r18
 c34:	6a 95       	dec	r22
 c36:	e2 f7       	brpl	.-8      	; 0xc30 <DIO_enuGetPinValue+0x68>
 c38:	b9 01       	movw	r22, r18
 c3a:	61 70       	andi	r22, 0x01	; 1
 c3c:	fa 01       	movw	r30, r20
 c3e:	60 83       	st	Z, r22
 *
 *  Return: Error Status : DIO_OK , DIO_NOK
 * */
DIO_tenuErrorStatus DIO_enuGetPinValue(u8 Copy_u8Port, u8 Copy_u8Pin, u8 *Add_pu8PinValue)
{
	DIO_tenuErrorStatus Local_enuErrorStatus = DIO_OK;
 c40:	80 e0       	ldi	r24, 0x00	; 0
	            	   *Add_pu8PinValue= ((DIO_u8_PINB_REG>>Copy_u8Pin)& 1) ;
	            	   break;

	               case DIO_u8_PORTC:
	            	   *Add_pu8PinValue= ((DIO_u8_PINC_REG>>Copy_u8Pin)& 1) ;
	            	   break;
 c42:	08 95       	ret

	               case DIO_u8_PORTD:
	            	   *Add_pu8PinValue= ((DIO_u8_PIND_REG>>Copy_u8Pin)& 1) ;
 c44:	80 b3       	in	r24, 0x10	; 16
 c46:	90 e0       	ldi	r25, 0x00	; 0
 c48:	9c 01       	movw	r18, r24
 c4a:	02 c0       	rjmp	.+4      	; 0xc50 <DIO_enuGetPinValue+0x88>
 c4c:	35 95       	asr	r19
 c4e:	27 95       	ror	r18
 c50:	6a 95       	dec	r22
 c52:	e2 f7       	brpl	.-8      	; 0xc4c <DIO_enuGetPinValue+0x84>
 c54:	b9 01       	movw	r22, r18
 c56:	61 70       	andi	r22, 0x01	; 1
 c58:	fa 01       	movw	r30, r20
 c5a:	60 83       	st	Z, r22
 *
 *  Return: Error Status : DIO_OK , DIO_NOK
 * */
DIO_tenuErrorStatus DIO_enuGetPinValue(u8 Copy_u8Port, u8 Copy_u8Pin, u8 *Add_pu8PinValue)
{
	DIO_tenuErrorStatus Local_enuErrorStatus = DIO_OK;
 c5c:	80 e0       	ldi	r24, 0x00	; 0
	            	   *Add_pu8PinValue= ((DIO_u8_PINC_REG>>Copy_u8Pin)& 1) ;
	            	   break;

	               case DIO_u8_PORTD:
	            	   *Add_pu8PinValue= ((DIO_u8_PIND_REG>>Copy_u8Pin)& 1) ;
	            	   break;
 c5e:	08 95       	ret
{
	DIO_tenuErrorStatus Local_enuErrorStatus = DIO_OK;

	// Error Checks  //
   if((Copy_u8Port>DIO_u8_PORTD) || (Copy_u8Pin > DIO_u8_PIN7) || (Add_pu8PinValue == NULL))
	   Local_enuErrorStatus = DIO_NOK;
 c60:	81 e0       	ldi	r24, 0x01	; 1
 c62:	08 95       	ret
 c64:	81 e0       	ldi	r24, 0x01	; 1
 c66:	08 95       	ret
 c68:	81 e0       	ldi	r24, 0x01	; 1
 c6a:	08 95       	ret
 *
 *  Return: Error Status : DIO_OK , DIO_NOK
 * */
DIO_tenuErrorStatus DIO_enuGetPinValue(u8 Copy_u8Port, u8 Copy_u8Pin, u8 *Add_pu8PinValue)
{
	DIO_tenuErrorStatus Local_enuErrorStatus = DIO_OK;
 c6c:	80 e0       	ldi	r24, 0x00	; 0
	            	   *Add_pu8PinValue= ((DIO_u8_PIND_REG>>Copy_u8Pin)& 1) ;
	            	   break;
	   	   	}
   }
   return Local_enuErrorStatus;
}
 c6e:	08 95       	ret

00000c70 <DIO_enuSetPortValue>:
DIO_tenuErrorStatus DIO_enuSetPortValue (u8 Copy_u8Port, u8 Copy_u8PortValue)
{
	DIO_tenuErrorStatus Local_enuErrorStatus = DIO_OK;

	// check error status //
	if((Copy_u8Port>3 )|| (Copy_u8PortValue > 255))
 c70:	84 30       	cpi	r24, 0x04	; 4
 c72:	a8 f4       	brcc	.+42     	; 0xc9e <DIO_enuSetPortValue+0x2e>
	{
		Local_enuErrorStatus= DIO_NOK;
	}
	else
	{
		 switch (Copy_u8Port)
 c74:	81 30       	cpi	r24, 0x01	; 1
 c76:	51 f0       	breq	.+20     	; 0xc8c <DIO_enuSetPortValue+0x1c>
 c78:	81 30       	cpi	r24, 0x01	; 1
 c7a:	28 f0       	brcs	.+10     	; 0xc86 <DIO_enuSetPortValue+0x16>
 c7c:	82 30       	cpi	r24, 0x02	; 2
 c7e:	49 f0       	breq	.+18     	; 0xc92 <DIO_enuSetPortValue+0x22>
 c80:	83 30       	cpi	r24, 0x03	; 3
 c82:	79 f4       	brne	.+30     	; 0xca2 <DIO_enuSetPortValue+0x32>
 c84:	09 c0       	rjmp	.+18     	; 0xc98 <DIO_enuSetPortValue+0x28>
	       {
	          case DIO_u8_PORTA:
	        	  DIO_u8_PORTA_REG = Copy_u8PortValue;
 c86:	6b bb       	out	0x1b, r22	; 27
 *
 *  Return: Error Status : DIO_OK , DIO_NOK
 * */
DIO_tenuErrorStatus DIO_enuSetPortValue (u8 Copy_u8Port, u8 Copy_u8PortValue)
{
	DIO_tenuErrorStatus Local_enuErrorStatus = DIO_OK;
 c88:	80 e0       	ldi	r24, 0x00	; 0
	{
		 switch (Copy_u8Port)
	       {
	          case DIO_u8_PORTA:
	        	  DIO_u8_PORTA_REG = Copy_u8PortValue;
	         		break;
 c8a:	08 95       	ret

	          case DIO_u8_PORTB:
	        	  DIO_u8_PORTB_REG = Copy_u8PortValue;
 c8c:	68 bb       	out	0x18, r22	; 24
 *
 *  Return: Error Status : DIO_OK , DIO_NOK
 * */
DIO_tenuErrorStatus DIO_enuSetPortValue (u8 Copy_u8Port, u8 Copy_u8PortValue)
{
	DIO_tenuErrorStatus Local_enuErrorStatus = DIO_OK;
 c8e:	80 e0       	ldi	r24, 0x00	; 0
	        	  DIO_u8_PORTA_REG = Copy_u8PortValue;
	         		break;

	          case DIO_u8_PORTB:
	        	  DIO_u8_PORTB_REG = Copy_u8PortValue;
	      	   break;
 c90:	08 95       	ret

	          case DIO_u8_PORTC:
	        	  DIO_u8_PORTC_REG = Copy_u8PortValue;
 c92:	65 bb       	out	0x15, r22	; 21
 *
 *  Return: Error Status : DIO_OK , DIO_NOK
 * */
DIO_tenuErrorStatus DIO_enuSetPortValue (u8 Copy_u8Port, u8 Copy_u8PortValue)
{
	DIO_tenuErrorStatus Local_enuErrorStatus = DIO_OK;
 c94:	80 e0       	ldi	r24, 0x00	; 0
	        	  DIO_u8_PORTB_REG = Copy_u8PortValue;
	      	   break;

	          case DIO_u8_PORTC:
	        	  DIO_u8_PORTC_REG = Copy_u8PortValue;
	      	   break;
 c96:	08 95       	ret

	          case DIO_u8_PORTD:
	        	  DIO_u8_PORTD_REG = Copy_u8PortValue;
 c98:	62 bb       	out	0x12, r22	; 18
 *
 *  Return: Error Status : DIO_OK , DIO_NOK
 * */
DIO_tenuErrorStatus DIO_enuSetPortValue (u8 Copy_u8Port, u8 Copy_u8PortValue)
{
	DIO_tenuErrorStatus Local_enuErrorStatus = DIO_OK;
 c9a:	80 e0       	ldi	r24, 0x00	; 0
	        	  DIO_u8_PORTC_REG = Copy_u8PortValue;
	      	   break;

	          case DIO_u8_PORTD:
	        	  DIO_u8_PORTD_REG = Copy_u8PortValue;
	      	   break;
 c9c:	08 95       	ret
	DIO_tenuErrorStatus Local_enuErrorStatus = DIO_OK;

	// check error status //
	if((Copy_u8Port>3 )|| (Copy_u8PortValue > 255))
	{
		Local_enuErrorStatus= DIO_NOK;
 c9e:	81 e0       	ldi	r24, 0x01	; 1
 ca0:	08 95       	ret
 *
 *  Return: Error Status : DIO_OK , DIO_NOK
 * */
DIO_tenuErrorStatus DIO_enuSetPortValue (u8 Copy_u8Port, u8 Copy_u8PortValue)
{
	DIO_tenuErrorStatus Local_enuErrorStatus = DIO_OK;
 ca2:	80 e0       	ldi	r24, 0x00	; 0
	      	   break;
	 	  }
	}

   return Local_enuErrorStatus;
}
 ca4:	08 95       	ret

00000ca6 <DIO_enuGetPortValue>:
DIO_tenuErrorStatus DIO_enuGetPortValue (u8 Copy_u8Port, u8 *Add_pu8PortValue)
{
	DIO_tenuErrorStatus Local_enuErrorStatus = DIO_OK;

		// check error status //
		if((Copy_u8Port>3 )|| (Add_pu8PortValue == NULL))
 ca6:	84 30       	cpi	r24, 0x04	; 4
 ca8:	00 f5       	brcc	.+64     	; 0xcea <DIO_enuGetPortValue+0x44>
 caa:	61 15       	cp	r22, r1
 cac:	71 05       	cpc	r23, r1
 cae:	f9 f0       	breq	.+62     	; 0xcee <DIO_enuGetPortValue+0x48>
		{
			Local_enuErrorStatus= DIO_NOK;
		}
		else
		{
			 switch (Copy_u8Port)
 cb0:	81 30       	cpi	r24, 0x01	; 1
 cb2:	61 f0       	breq	.+24     	; 0xccc <DIO_enuGetPortValue+0x26>
 cb4:	81 30       	cpi	r24, 0x01	; 1
 cb6:	28 f0       	brcs	.+10     	; 0xcc2 <DIO_enuGetPortValue+0x1c>
 cb8:	82 30       	cpi	r24, 0x02	; 2
 cba:	69 f0       	breq	.+26     	; 0xcd6 <DIO_enuGetPortValue+0x30>
 cbc:	83 30       	cpi	r24, 0x03	; 3
 cbe:	c9 f4       	brne	.+50     	; 0xcf2 <DIO_enuGetPortValue+0x4c>
 cc0:	0f c0       	rjmp	.+30     	; 0xce0 <DIO_enuGetPortValue+0x3a>
		       {
		          case DIO_u8_PORTA:
		        	  *Add_pu8PortValue= DIO_u8_PORTA_REG ;
 cc2:	8b b3       	in	r24, 0x1b	; 27
 cc4:	fb 01       	movw	r30, r22
 cc6:	80 83       	st	Z, r24
 *
 *  Return: Error Status : DIO_OK , DIO_NOK
 * */
DIO_tenuErrorStatus DIO_enuGetPortValue (u8 Copy_u8Port, u8 *Add_pu8PortValue)
{
	DIO_tenuErrorStatus Local_enuErrorStatus = DIO_OK;
 cc8:	80 e0       	ldi	r24, 0x00	; 0
		{
			 switch (Copy_u8Port)
		       {
		          case DIO_u8_PORTA:
		        	  *Add_pu8PortValue= DIO_u8_PORTA_REG ;
		        	  break;
 cca:	08 95       	ret

		          case DIO_u8_PORTB:
		        	  *Add_pu8PortValue= DIO_u8_PORTB_REG ;
 ccc:	88 b3       	in	r24, 0x18	; 24
 cce:	fb 01       	movw	r30, r22
 cd0:	80 83       	st	Z, r24
 *
 *  Return: Error Status : DIO_OK , DIO_NOK
 * */
DIO_tenuErrorStatus DIO_enuGetPortValue (u8 Copy_u8Port, u8 *Add_pu8PortValue)
{
	DIO_tenuErrorStatus Local_enuErrorStatus = DIO_OK;
 cd2:	80 e0       	ldi	r24, 0x00	; 0
		        	  *Add_pu8PortValue= DIO_u8_PORTA_REG ;
		        	  break;

		          case DIO_u8_PORTB:
		        	  *Add_pu8PortValue= DIO_u8_PORTB_REG ;
		        	  break;
 cd4:	08 95       	ret

		          case DIO_u8_PORTC:
	            	   *Add_pu8PortValue= DIO_u8_PORTC_REG ;
 cd6:	85 b3       	in	r24, 0x15	; 21
 cd8:	fb 01       	movw	r30, r22
 cda:	80 83       	st	Z, r24
 *
 *  Return: Error Status : DIO_OK , DIO_NOK
 * */
DIO_tenuErrorStatus DIO_enuGetPortValue (u8 Copy_u8Port, u8 *Add_pu8PortValue)
{
	DIO_tenuErrorStatus Local_enuErrorStatus = DIO_OK;
 cdc:	80 e0       	ldi	r24, 0x00	; 0
		        	  *Add_pu8PortValue= DIO_u8_PORTB_REG ;
		        	  break;

		          case DIO_u8_PORTC:
	            	   *Add_pu8PortValue= DIO_u8_PORTC_REG ;
		      	   break;
 cde:	08 95       	ret

		          case DIO_u8_PORTD:
		        	  *Add_pu8PortValue= DIO_u8_PORTD_REG ;
 ce0:	82 b3       	in	r24, 0x12	; 18
 ce2:	fb 01       	movw	r30, r22
 ce4:	80 83       	st	Z, r24
 *
 *  Return: Error Status : DIO_OK , DIO_NOK
 * */
DIO_tenuErrorStatus DIO_enuGetPortValue (u8 Copy_u8Port, u8 *Add_pu8PortValue)
{
	DIO_tenuErrorStatus Local_enuErrorStatus = DIO_OK;
 ce6:	80 e0       	ldi	r24, 0x00	; 0
	            	   *Add_pu8PortValue= DIO_u8_PORTC_REG ;
		      	   break;

		          case DIO_u8_PORTD:
		        	  *Add_pu8PortValue= DIO_u8_PORTD_REG ;
		        	  break;
 ce8:	08 95       	ret
	DIO_tenuErrorStatus Local_enuErrorStatus = DIO_OK;

		// check error status //
		if((Copy_u8Port>3 )|| (Add_pu8PortValue == NULL))
		{
			Local_enuErrorStatus= DIO_NOK;
 cea:	81 e0       	ldi	r24, 0x01	; 1
 cec:	08 95       	ret
 cee:	81 e0       	ldi	r24, 0x01	; 1
 cf0:	08 95       	ret
 *
 *  Return: Error Status : DIO_OK , DIO_NOK
 * */
DIO_tenuErrorStatus DIO_enuGetPortValue (u8 Copy_u8Port, u8 *Add_pu8PortValue)
{
	DIO_tenuErrorStatus Local_enuErrorStatus = DIO_OK;
 cf2:	80 e0       	ldi	r24, 0x00	; 0
		        	  break;
		 	  }
		}

	   return Local_enuErrorStatus;
}
 cf4:	08 95       	ret

00000cf6 <DIO_enuTogglePort>:
DIO_tenuErrorStatus DIO_enuTogglePort(u8 Copy_u8Port)
{
 	DIO_tenuErrorStatus Local_enuErrorStatus = DIO_OK;

 	// check error status //
 	if( Copy_u8Port>3 )
 cf6:	84 30       	cpi	r24, 0x04	; 4
 cf8:	e8 f4       	brcc	.+58     	; 0xd34 <DIO_enuTogglePort+0x3e>
 	{
	 	Local_enuErrorStatus= DIO_NOK;
 	}
	 else
	 {
		 switch (Copy_u8Port)
 cfa:	81 30       	cpi	r24, 0x01	; 1
 cfc:	61 f0       	breq	.+24     	; 0xd16 <DIO_enuTogglePort+0x20>
 cfe:	81 30       	cpi	r24, 0x01	; 1
 d00:	28 f0       	brcs	.+10     	; 0xd0c <DIO_enuTogglePort+0x16>
 d02:	82 30       	cpi	r24, 0x02	; 2
 d04:	69 f0       	breq	.+26     	; 0xd20 <DIO_enuTogglePort+0x2a>
 d06:	83 30       	cpi	r24, 0x03	; 3
 d08:	b9 f4       	brne	.+46     	; 0xd38 <DIO_enuTogglePort+0x42>
 d0a:	0f c0       	rjmp	.+30     	; 0xd2a <DIO_enuTogglePort+0x34>
		 {
	          case DIO_u8_PORTA:
	          DIO_u8_PORTA_REG ^= 0xFF;  //first way
 d0c:	8b b3       	in	r24, 0x1b	; 27
 d0e:	80 95       	com	r24
 d10:	8b bb       	out	0x1b, r24	; 27
	   return Local_enuErrorStatus;
}

DIO_tenuErrorStatus DIO_enuTogglePort(u8 Copy_u8Port)
{
 	DIO_tenuErrorStatus Local_enuErrorStatus = DIO_OK;
 d12:	80 e0       	ldi	r24, 0x00	; 0
	 {
		 switch (Copy_u8Port)
		 {
	          case DIO_u8_PORTA:
	          DIO_u8_PORTA_REG ^= 0xFF;  //first way
	          break;
 d14:	08 95       	ret

	          case DIO_u8_PORTB:
	          DIO_u8_PORTB_REG = ~DIO_u8_PORTA_REG; // second way
 d16:	8b b3       	in	r24, 0x1b	; 27
 d18:	80 95       	com	r24
 d1a:	88 bb       	out	0x18, r24	; 24
	   return Local_enuErrorStatus;
}

DIO_tenuErrorStatus DIO_enuTogglePort(u8 Copy_u8Port)
{
 	DIO_tenuErrorStatus Local_enuErrorStatus = DIO_OK;
 d1c:	80 e0       	ldi	r24, 0x00	; 0
	          DIO_u8_PORTA_REG ^= 0xFF;  //first way
	          break;

	          case DIO_u8_PORTB:
	          DIO_u8_PORTB_REG = ~DIO_u8_PORTA_REG; // second way
	          break;
 d1e:	08 95       	ret

	          case DIO_u8_PORTC:
	          DIO_u8_PORTC_REG ^= 0xFF;
 d20:	85 b3       	in	r24, 0x15	; 21
 d22:	80 95       	com	r24
 d24:	85 bb       	out	0x15, r24	; 21
	   return Local_enuErrorStatus;
}

DIO_tenuErrorStatus DIO_enuTogglePort(u8 Copy_u8Port)
{
 	DIO_tenuErrorStatus Local_enuErrorStatus = DIO_OK;
 d26:	80 e0       	ldi	r24, 0x00	; 0
	          DIO_u8_PORTB_REG = ~DIO_u8_PORTA_REG; // second way
	          break;

	          case DIO_u8_PORTC:
	          DIO_u8_PORTC_REG ^= 0xFF;
	          break;
 d28:	08 95       	ret

	          case DIO_u8_PORTD:
	          DIO_u8_PORTD_REG  ^= 0xFF;
 d2a:	82 b3       	in	r24, 0x12	; 18
 d2c:	80 95       	com	r24
 d2e:	82 bb       	out	0x12, r24	; 18
	   return Local_enuErrorStatus;
}

DIO_tenuErrorStatus DIO_enuTogglePort(u8 Copy_u8Port)
{
 	DIO_tenuErrorStatus Local_enuErrorStatus = DIO_OK;
 d30:	80 e0       	ldi	r24, 0x00	; 0
	          DIO_u8_PORTC_REG ^= 0xFF;
	          break;

	          case DIO_u8_PORTD:
	          DIO_u8_PORTD_REG  ^= 0xFF;
	          break;
 d32:	08 95       	ret
 	DIO_tenuErrorStatus Local_enuErrorStatus = DIO_OK;

 	// check error status //
 	if( Copy_u8Port>3 )
 	{
	 	Local_enuErrorStatus= DIO_NOK;
 d34:	81 e0       	ldi	r24, 0x01	; 1
 d36:	08 95       	ret
	   return Local_enuErrorStatus;
}

DIO_tenuErrorStatus DIO_enuTogglePort(u8 Copy_u8Port)
{
 	DIO_tenuErrorStatus Local_enuErrorStatus = DIO_OK;
 d38:	80 e0       	ldi	r24, 0x00	; 0
		 } 
	 }		 
	 
	 
	 	   return Local_enuErrorStatus;
}
 d3a:	08 95       	ret

00000d3c <DIO_enuTogglePin>:

DIO_tenuErrorStatus DIO_enuTogglePin(u8 Copy_u8Port, u8 Copy_u8Pin)
{
	DIO_tenuErrorStatus Local_enuErrorStatus = DIO_OK;
	//check error status //
	if(Copy_u8Port > DIO_u8_PORTD || Copy_u8Pin > DIO_u8_PIN7 )
 d3c:	84 30       	cpi	r24, 0x04	; 4
 d3e:	08 f0       	brcs	.+2      	; 0xd42 <DIO_enuTogglePin+0x6>
 d40:	45 c0       	rjmp	.+138    	; 0xdcc <DIO_enuTogglePin+0x90>
 d42:	68 30       	cpi	r22, 0x08	; 8
 d44:	08 f0       	brcs	.+2      	; 0xd48 <DIO_enuTogglePin+0xc>
 d46:	44 c0       	rjmp	.+136    	; 0xdd0 <DIO_enuTogglePin+0x94>
	 {
		 Local_enuErrorStatus= DIO_NOK;
	 }		 
	else
	{
		switch (Copy_u8Port)
 d48:	81 30       	cpi	r24, 0x01	; 1
 d4a:	b1 f0       	breq	.+44     	; 0xd78 <DIO_enuTogglePin+0x3c>
 d4c:	81 30       	cpi	r24, 0x01	; 1
 d4e:	30 f0       	brcs	.+12     	; 0xd5c <DIO_enuTogglePin+0x20>
 d50:	82 30       	cpi	r24, 0x02	; 2
 d52:	01 f1       	breq	.+64     	; 0xd94 <DIO_enuTogglePin+0x58>
 d54:	83 30       	cpi	r24, 0x03	; 3
 d56:	09 f0       	breq	.+2      	; 0xd5a <DIO_enuTogglePin+0x1e>
 d58:	3d c0       	rjmp	.+122    	; 0xdd4 <DIO_enuTogglePin+0x98>
 d5a:	2a c0       	rjmp	.+84     	; 0xdb0 <DIO_enuTogglePin+0x74>
		{
			case DIO_u8_PORTA:
			DIO_u8_PORTA_REG ^= (1<<Copy_u8Pin);  
 d5c:	2b b3       	in	r18, 0x1b	; 27
 d5e:	81 e0       	ldi	r24, 0x01	; 1
 d60:	90 e0       	ldi	r25, 0x00	; 0
 d62:	ac 01       	movw	r20, r24
 d64:	02 c0       	rjmp	.+4      	; 0xd6a <DIO_enuTogglePin+0x2e>
 d66:	44 0f       	add	r20, r20
 d68:	55 1f       	adc	r21, r21
 d6a:	6a 95       	dec	r22
 d6c:	e2 f7       	brpl	.-8      	; 0xd66 <DIO_enuTogglePin+0x2a>
 d6e:	ba 01       	movw	r22, r20
 d70:	62 27       	eor	r22, r18
 d72:	6b bb       	out	0x1b, r22	; 27



DIO_tenuErrorStatus DIO_enuTogglePin(u8 Copy_u8Port, u8 Copy_u8Pin)
{
	DIO_tenuErrorStatus Local_enuErrorStatus = DIO_OK;
 d74:	80 e0       	ldi	r24, 0x00	; 0
	{
		switch (Copy_u8Port)
		{
			case DIO_u8_PORTA:
			DIO_u8_PORTA_REG ^= (1<<Copy_u8Pin);  
			break;
 d76:	08 95       	ret

			case DIO_u8_PORTB:
			DIO_u8_PORTB_REG ^= (1<<Copy_u8Pin);
 d78:	28 b3       	in	r18, 0x18	; 24
 d7a:	81 e0       	ldi	r24, 0x01	; 1
 d7c:	90 e0       	ldi	r25, 0x00	; 0
 d7e:	ac 01       	movw	r20, r24
 d80:	02 c0       	rjmp	.+4      	; 0xd86 <DIO_enuTogglePin+0x4a>
 d82:	44 0f       	add	r20, r20
 d84:	55 1f       	adc	r21, r21
 d86:	6a 95       	dec	r22
 d88:	e2 f7       	brpl	.-8      	; 0xd82 <DIO_enuTogglePin+0x46>
 d8a:	ba 01       	movw	r22, r20
 d8c:	62 27       	eor	r22, r18
 d8e:	68 bb       	out	0x18, r22	; 24



DIO_tenuErrorStatus DIO_enuTogglePin(u8 Copy_u8Port, u8 Copy_u8Pin)
{
	DIO_tenuErrorStatus Local_enuErrorStatus = DIO_OK;
 d90:	80 e0       	ldi	r24, 0x00	; 0
			DIO_u8_PORTA_REG ^= (1<<Copy_u8Pin);  
			break;

			case DIO_u8_PORTB:
			DIO_u8_PORTB_REG ^= (1<<Copy_u8Pin);
			break;
 d92:	08 95       	ret

			case DIO_u8_PORTC:
			DIO_u8_PORTC_REG ^= (1<<Copy_u8Pin);
 d94:	25 b3       	in	r18, 0x15	; 21
 d96:	81 e0       	ldi	r24, 0x01	; 1
 d98:	90 e0       	ldi	r25, 0x00	; 0
 d9a:	ac 01       	movw	r20, r24
 d9c:	02 c0       	rjmp	.+4      	; 0xda2 <DIO_enuTogglePin+0x66>
 d9e:	44 0f       	add	r20, r20
 da0:	55 1f       	adc	r21, r21
 da2:	6a 95       	dec	r22
 da4:	e2 f7       	brpl	.-8      	; 0xd9e <DIO_enuTogglePin+0x62>
 da6:	ba 01       	movw	r22, r20
 da8:	62 27       	eor	r22, r18
 daa:	65 bb       	out	0x15, r22	; 21



DIO_tenuErrorStatus DIO_enuTogglePin(u8 Copy_u8Port, u8 Copy_u8Pin)
{
	DIO_tenuErrorStatus Local_enuErrorStatus = DIO_OK;
 dac:	80 e0       	ldi	r24, 0x00	; 0
			DIO_u8_PORTB_REG ^= (1<<Copy_u8Pin);
			break;

			case DIO_u8_PORTC:
			DIO_u8_PORTC_REG ^= (1<<Copy_u8Pin);
			break;
 dae:	08 95       	ret

			case DIO_u8_PORTD:
			DIO_u8_PORTD_REG  ^=(1<<Copy_u8Pin);
 db0:	22 b3       	in	r18, 0x12	; 18
 db2:	81 e0       	ldi	r24, 0x01	; 1
 db4:	90 e0       	ldi	r25, 0x00	; 0
 db6:	ac 01       	movw	r20, r24
 db8:	02 c0       	rjmp	.+4      	; 0xdbe <DIO_enuTogglePin+0x82>
 dba:	44 0f       	add	r20, r20
 dbc:	55 1f       	adc	r21, r21
 dbe:	6a 95       	dec	r22
 dc0:	e2 f7       	brpl	.-8      	; 0xdba <DIO_enuTogglePin+0x7e>
 dc2:	ba 01       	movw	r22, r20
 dc4:	62 27       	eor	r22, r18
 dc6:	62 bb       	out	0x12, r22	; 18



DIO_tenuErrorStatus DIO_enuTogglePin(u8 Copy_u8Port, u8 Copy_u8Pin)
{
	DIO_tenuErrorStatus Local_enuErrorStatus = DIO_OK;
 dc8:	80 e0       	ldi	r24, 0x00	; 0
			DIO_u8_PORTC_REG ^= (1<<Copy_u8Pin);
			break;

			case DIO_u8_PORTD:
			DIO_u8_PORTD_REG  ^=(1<<Copy_u8Pin);
			break;
 dca:	08 95       	ret
{
	DIO_tenuErrorStatus Local_enuErrorStatus = DIO_OK;
	//check error status //
	if(Copy_u8Port > DIO_u8_PORTD || Copy_u8Pin > DIO_u8_PIN7 )
	 {
		 Local_enuErrorStatus= DIO_NOK;
 dcc:	81 e0       	ldi	r24, 0x01	; 1
 dce:	08 95       	ret
 dd0:	81 e0       	ldi	r24, 0x01	; 1
 dd2:	08 95       	ret



DIO_tenuErrorStatus DIO_enuTogglePin(u8 Copy_u8Port, u8 Copy_u8Pin)
{
	DIO_tenuErrorStatus Local_enuErrorStatus = DIO_OK;
 dd4:	80 e0       	ldi	r24, 0x00	; 0
			break;
		}
	}
	return Local_enuErrorStatus;

}
 dd6:	08 95       	ret

00000dd8 <EEPROM_enuWriteData>:
	}
	else 
	{
	
		// Set up Address Register 
		EEPROM_u16_EEARL_REG = Copy_u16Address;
 dd8:	9f bb       	out	0x1f, r25	; 31
 dda:	8e bb       	out	0x1e, r24	; 30
		
		// Set Up Data Register
		EEPROM_u8_EEDR_REG = Copy_u8Data ; 
 ddc:	6d bb       	out	0x1d, r22	; 29
		
		// Write one to the EEMWE
		EEPROM_u8_EECR_REG |= (1<<2);
 dde:	e2 9a       	sbi	0x1c, 2	; 28
		
		// Start EEPROM Write by Setting EEWE to 1 
		EEPROM_u8_EECR_REG |= (1<<1);
 de0:	e1 9a       	sbi	0x1c, 1	; 28
		
		// Polling on the flag (wait for the write operation to be completed )
			while((EEPROM_u8_EECR_REG >> 1 & 1) == 1);
 de2:	8c b3       	in	r24, 0x1c	; 28
 de4:	81 fd       	sbrc	r24, 1
 de6:	fd cf       	rjmp	.-6      	; 0xde2 <EEPROM_enuWriteData+0xa>
	}
	return Local_enuErrorStatus;
}
 de8:	80 e0       	ldi	r24, 0x00	; 0
 dea:	08 95       	ret

00000dec <EEPROM_u8ReadeData>:

u8 EEPROM_u8ReadeData(u16 Copy_u16Address)
{

				// Set up Address Register
				EEPROM_u16_EEARL_REG = Copy_u16Address;
 dec:	9f bb       	out	0x1f, r25	; 31
 dee:	8e bb       	out	0x1e, r24	; 30
				
				// Start EEPROM Read by Setting EERE to 1
				EEPROM_u8_EECR_REG |= (1<<0);
 df0:	e0 9a       	sbi	0x1c, 0	; 28
				
				// Reading Operation takes only one cycle so it's not neccessry to polling on the flag
				return EEPROM_u8_EEDR_REG;
 df2:	8d b3       	in	r24, 0x1d	; 29
	
 df4:	08 95       	ret

00000df6 <__udivmodsi4>:
 df6:	a1 e2       	ldi	r26, 0x21	; 33
 df8:	1a 2e       	mov	r1, r26
 dfa:	aa 1b       	sub	r26, r26
 dfc:	bb 1b       	sub	r27, r27
 dfe:	fd 01       	movw	r30, r26
 e00:	0d c0       	rjmp	.+26     	; 0xe1c <__udivmodsi4_ep>

00000e02 <__udivmodsi4_loop>:
 e02:	aa 1f       	adc	r26, r26
 e04:	bb 1f       	adc	r27, r27
 e06:	ee 1f       	adc	r30, r30
 e08:	ff 1f       	adc	r31, r31
 e0a:	a2 17       	cp	r26, r18
 e0c:	b3 07       	cpc	r27, r19
 e0e:	e4 07       	cpc	r30, r20
 e10:	f5 07       	cpc	r31, r21
 e12:	20 f0       	brcs	.+8      	; 0xe1c <__udivmodsi4_ep>
 e14:	a2 1b       	sub	r26, r18
 e16:	b3 0b       	sbc	r27, r19
 e18:	e4 0b       	sbc	r30, r20
 e1a:	f5 0b       	sbc	r31, r21

00000e1c <__udivmodsi4_ep>:
 e1c:	66 1f       	adc	r22, r22
 e1e:	77 1f       	adc	r23, r23
 e20:	88 1f       	adc	r24, r24
 e22:	99 1f       	adc	r25, r25
 e24:	1a 94       	dec	r1
 e26:	69 f7       	brne	.-38     	; 0xe02 <__udivmodsi4_loop>
 e28:	60 95       	com	r22
 e2a:	70 95       	com	r23
 e2c:	80 95       	com	r24
 e2e:	90 95       	com	r25
 e30:	9b 01       	movw	r18, r22
 e32:	ac 01       	movw	r20, r24
 e34:	bd 01       	movw	r22, r26
 e36:	cf 01       	movw	r24, r30
 e38:	08 95       	ret

00000e3a <_exit>:
 e3a:	f8 94       	cli

00000e3c <__stop_program>:
 e3c:	ff cf       	rjmp	.-2      	; 0xe3c <__stop_program>
